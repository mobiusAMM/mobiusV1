{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "NewInstance",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "master",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "initdata",
          "type": "bytes"
        }
      ],
      "name": "clone",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "master",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "initdata",
          "type": "bytes"
        }
      ],
      "name": "cloneDeterministic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "master",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "predictDeterministicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "predicted",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "135": "contracts/openzeppelin-contracts@3.4.0/contracts/utils/Address.sol",
    "35": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ClonesMock.sol",
    "99": "contracts/openzeppelin-contracts@3.4.0/contracts/proxy/Clones.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ClonesMock.sol",
    "exportedSymbols": {
      "ClonesMock": [
        10546
      ]
    },
    "id": 10547,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10459,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:31:35"
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts@3.4.0/contracts/proxy/Clones.sol",
        "file": "../proxy/Clones.sol",
        "id": 10460,
        "nodeType": "ImportDirective",
        "scope": 10547,
        "sourceUnit": 16379,
        "src": "66:29:35",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts@3.4.0/contracts/utils/Address.sol",
        "file": "../utils/Address.sol",
        "id": 10461,
        "nodeType": "ImportDirective",
        "scope": 10547,
        "sourceUnit": 22635,
        "src": "96:30:35",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 10546,
        "linearizedBaseContracts": [
          10546
        ],
        "name": "ClonesMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 10464,
            "libraryName": {
              "contractScope": null,
              "id": 10462,
              "name": "Address",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 22634,
              "src": "160:7:35",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Address_$22634",
                "typeString": "library Address"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "154:26:35",
            "typeName": {
              "id": 10463,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "172:7:35",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            }
          },
          {
            "id": 10467,
            "libraryName": {
              "contractScope": null,
              "id": 10465,
              "name": "Clones",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 16378,
              "src": "191:6:35",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Clones_$16378",
                "typeString": "library Clones"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "185:25:35",
            "typeName": {
              "id": 10466,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "202:7:35",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            }
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 10471,
            "name": "NewInstance",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10470,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10469,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "instance",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10471,
                  "src": "234:16:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10468,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "234:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "233:18:35"
            },
            "src": "216:36:35"
          },
          {
            "body": {
              "id": 10485,
              "nodeType": "Block",
              "src": "329:55:35",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "id": 10479,
                            "name": "master",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10473,
                            "src": "352:6:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 10480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "clone",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 16321,
                          "src": "352:12:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_address_$bound_to$_t_address_$",
                            "typeString": "function (address) returns (address)"
                          }
                        },
                        "id": 10481,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "352:14:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 10482,
                        "name": "initdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10475,
                        "src": "368:8:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 10478,
                      "name": "_initAndEmit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10545,
                      "src": "339:12:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory)"
                      }
                    },
                    "id": 10483,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "339:38:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10484,
                  "nodeType": "ExpressionStatement",
                  "src": "339:38:35"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "0fbe133c",
            "id": 10486,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "clone",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 10476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10473,
                  "mutability": "mutable",
                  "name": "master",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10486,
                  "src": "273:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10472,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "273:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10475,
                  "mutability": "mutable",
                  "name": "initdata",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10486,
                  "src": "289:23:35",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10474,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "289:5:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "272:41:35"
            },
            "returnParameters": {
              "id": 10477,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "329:0:35"
            },
            "scope": 10546,
            "src": "258:126:35",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10503,
              "nodeType": "Block",
              "src": "488:72:35",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 10498,
                            "name": "salt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10490,
                            "src": "537:4:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 10496,
                            "name": "master",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10488,
                            "src": "511:6:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 10497,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "cloneDeterministic",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 16343,
                          "src": "511:25:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes32_$returns$_t_address_$bound_to$_t_address_$",
                            "typeString": "function (address,bytes32) returns (address)"
                          }
                        },
                        "id": 10499,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "511:31:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 10500,
                        "name": "initdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10492,
                        "src": "544:8:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 10495,
                      "name": "_initAndEmit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10545,
                      "src": "498:12:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory)"
                      }
                    },
                    "id": 10501,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "498:55:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10502,
                  "nodeType": "ExpressionStatement",
                  "src": "498:55:35"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "6e9ebc81",
            "id": 10504,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "cloneDeterministic",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 10493,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10488,
                  "mutability": "mutable",
                  "name": "master",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10504,
                  "src": "418:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10487,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "418:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10490,
                  "mutability": "mutable",
                  "name": "salt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10504,
                  "src": "434:12:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 10489,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "434:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10492,
                  "mutability": "mutable",
                  "name": "initdata",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10504,
                  "src": "448:23:35",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10491,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "448:5:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "417:55:35"
            },
            "returnParameters": {
              "id": 10494,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "488:0:35"
            },
            "scope": 10546,
            "src": "390:170:35",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10518,
              "nodeType": "Block",
              "src": "673:64:35",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10515,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10508,
                        "src": "725:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 10513,
                        "name": "master",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10506,
                        "src": "690:6:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 10514,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "predictDeterministicAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16377,
                      "src": "690:34:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes32_$returns$_t_address_$bound_to$_t_address_$",
                        "typeString": "function (address,bytes32) view returns (address)"
                      }
                    },
                    "id": 10516,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "690:40:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 10512,
                  "id": 10517,
                  "nodeType": "Return",
                  "src": "683:47:35"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "360d0fad",
            "id": 10519,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "predictDeterministicAddress",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 10509,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10506,
                  "mutability": "mutable",
                  "name": "master",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10519,
                  "src": "603:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10505,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "603:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10508,
                  "mutability": "mutable",
                  "name": "salt",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10519,
                  "src": "619:12:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 10507,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "619:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "602:30:35"
            },
            "returnParameters": {
              "id": 10512,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10511,
                  "mutability": "mutable",
                  "name": "predicted",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10519,
                  "src": "654:17:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10510,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "654:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "653:19:35"
            },
            "scope": 10546,
            "src": "566:171:35",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10544,
              "nodeType": "Block",
              "src": "814:153:35",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 10529,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 10526,
                        "name": "initdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10523,
                        "src": "828:8:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 10527,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "828:15:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 10528,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "846:1:35",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "828:19:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 10539,
                  "nodeType": "IfStatement",
                  "src": "824:101:35",
                  "trueBody": {
                    "id": 10538,
                    "nodeType": "Block",
                    "src": "849:76:35",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 10533,
                              "name": "initdata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10523,
                              "src": "894:8:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 10534,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "904:3:35",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 10535,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "904:9:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 10530,
                              "name": "instance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10521,
                              "src": "863:8:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 10532,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "functionCallWithValue",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 22449,
                            "src": "863:30:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
                              "typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
                            }
                          },
                          "id": 10536,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "863:51:35",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 10537,
                        "nodeType": "ExpressionStatement",
                        "src": "863:51:35"
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10541,
                        "name": "instance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10521,
                        "src": "951:8:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 10540,
                      "name": "NewInstance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10471,
                      "src": "939:11:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 10542,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "939:21:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10543,
                  "nodeType": "EmitStatement",
                  "src": "934:26:35"
                }
              ]
            },
            "documentation": null,
            "id": 10545,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_initAndEmit",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 10524,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10521,
                  "mutability": "mutable",
                  "name": "instance",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10545,
                  "src": "765:16:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10520,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "765:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10523,
                  "mutability": "mutable",
                  "name": "initdata",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 10545,
                  "src": "783:21:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 10522,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "783:5:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "764:41:35"
            },
            "returnParameters": {
              "id": 10525,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "814:0:35"
            },
            "scope": 10546,
            "src": "743:224:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "scope": 10547,
        "src": "128:841:35"
      }
    ],
    "src": "33:937:35"
  },
  "bytecode": "608060405234801561001057600080fd5b506106ef806100206000396000f3fe6080604052600436106100345760003560e01c80630fbe133c14610039578063360d0fad146100bb5780636e9ebc8114610110575b600080fd5b6100b96004803603604081101561004f57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561007a57600080fd5b82018360208201111561008c57600080fd5b803590602001918460018302840111640100000000831117156100ae57600080fd5b509092509050610195565b005b3480156100c757600080fd5b506100f4600480360360408110156100de57600080fd5b506001600160a01b0381351690602001356101eb565b604080516001600160a01b039092168252519081900360200190f35b6100b96004803603606081101561012657600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561015657600080fd5b82018360208201111561016857600080fd5b8035906020019184600183028401116401000000008311171561018a57600080fd5b509092509050610209565b6101e66101aa846001600160a01b0316610225565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102c792505050565b505050565b60006102006001600160a01b03841683610324565b90505b92915050565b61021f6101aa6001600160a01b03861685610331565b50505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166102c2576040805162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015290519081900360640190fd5b919050565b8051156102e4576102e26001600160a01b03831682346103d6565b505b604080516001600160a01b038416815290517f39a773f10839d86923d91d5ce7d6642f2f63a95d850495abb1f162e38aa04ea59181900360200190a15050565b6000610200838330610406565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b038116610203576040805162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015290519081900360640190fd5b60606103fc84848460405180606001604052806029815260200161069160299139610464565b90505b9392505050565b604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6060824710156104a55760405162461bcd60e51b815260040180806020018281038252602681526020018061066b6026913960400191505060405180910390fd5b6104ae856105c0565b6104ff576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061053e5780518252601f19909201916020918201910161051f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146105a0576040519150601f19603f3d011682016040523d82523d6000602084013e6105a5565b606091505b50915091506105b58282866105c6565b979650505050505050565b3b151590565b606083156105d55750816103ff565b8251156105e55782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561062f578181015183820152602001610617565b50505050905090810190601f16801561065c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212209953eea29c7520f74761b553db3125d092014f37839c2344c1e5241e257c5ab264736f6c634300060c0033",
  "bytecodeSha1": "6d856b1aceed7b7fd89950bc0dfdc0810e56265e",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.12+commit.27d51765"
  },
  "contractName": "ClonesMock",
  "coverageMap": {
    "branches": {
      "135": {
        "Address._verifyCallResult": {
          "18": [
            7234,
            7241,
            false
          ],
          "19": [
            7375,
            7396,
            false
          ]
        },
        "Address.functionCallWithValue": {
          "16": [
            4767,
            4797,
            true
          ],
          "17": [
            4858,
            4876,
            true
          ]
        }
      },
      "35": {
        "ClonesMock._initAndEmit": {
          "15": [
            828,
            847,
            false
          ]
        }
      },
      "99": {
        "Clones.clone": {
          "20": [
            1405,
            1427,
            true
          ]
        },
        "Clones.cloneDeterministic": {
          "21": [
            2353,
            2375,
            true
          ]
        }
      }
    },
    "statements": {
      "135": {
        "Address._verifyCallResult": {
          "13": [
            7257,
            7274
          ],
          "14": [
            7765,
            7785
          ]
        },
        "Address.functionCallWithValue": {
          "8": [
            4259,
            4353
          ],
          "9": [
            4759,
            4840
          ],
          "10": [
            4850,
            4910
          ],
          "11": [
            5065,
            5124
          ]
        },
        "Address.isContract": {
          "12": [
            1117,
            1132
          ]
        }
      },
      "35": {
        "ClonesMock._initAndEmit": {
          "4": [
            863,
            914
          ],
          "5": [
            934,
            960
          ]
        },
        "ClonesMock.clone": {
          "0": [
            339,
            377
          ]
        },
        "ClonesMock.cloneDeterministic": {
          "2": [
            498,
            553
          ]
        },
        "ClonesMock.predictDeterministicAddress": {
          "1": [
            683,
            730
          ]
        }
      },
      "99": {
        "Clones.clone": {
          "3": [
            1397,
            1454
          ]
        },
        "Clones.cloneDeterministic": {
          "7": [
            2345,
            2403
          ]
        },
        "Clones.predictDeterministicAddress": {
          "6": [
            3463,
            3526
          ]
        }
      }
    }
  },
  "dependencies": [
    "Address",
    "Clones"
  ],
  "deployedBytecode": "6080604052600436106100345760003560e01c80630fbe133c14610039578063360d0fad146100bb5780636e9ebc8114610110575b600080fd5b6100b96004803603604081101561004f57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561007a57600080fd5b82018360208201111561008c57600080fd5b803590602001918460018302840111640100000000831117156100ae57600080fd5b509092509050610195565b005b3480156100c757600080fd5b506100f4600480360360408110156100de57600080fd5b506001600160a01b0381351690602001356101eb565b604080516001600160a01b039092168252519081900360200190f35b6100b96004803603606081101561012657600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561015657600080fd5b82018360208201111561016857600080fd5b8035906020019184600183028401116401000000008311171561018a57600080fd5b509092509050610209565b6101e66101aa846001600160a01b0316610225565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102c792505050565b505050565b60006102006001600160a01b03841683610324565b90505b92915050565b61021f6101aa6001600160a01b03861685610331565b50505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166102c2576040805162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015290519081900360640190fd5b919050565b8051156102e4576102e26001600160a01b03831682346103d6565b505b604080516001600160a01b038416815290517f39a773f10839d86923d91d5ce7d6642f2f63a95d850495abb1f162e38aa04ea59181900360200190a15050565b6000610200838330610406565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b038116610203576040805162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015290519081900360640190fd5b60606103fc84848460405180606001604052806029815260200161069160299139610464565b90505b9392505050565b604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6060824710156104a55760405162461bcd60e51b815260040180806020018281038252602681526020018061066b6026913960400191505060405180910390fd5b6104ae856105c0565b6104ff576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061053e5780518252601f19909201916020918201910161051f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146105a0576040519150601f19603f3d011682016040523d82523d6000602084013e6105a5565b606091505b50915091506105b58282866105c6565b979650505050505050565b3b151590565b606083156105d55750816103ff565b8251156105e55782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561062f578181015183820152602001610617565b50505050905090810190601f16801561065c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212209953eea29c7520f74761b553db3125d092014f37839c2344c1e5241e257c5ab264736f6c634300060c0033",
  "deployedSourceMap": "128:841:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;258:126;;;;;;;;;;;;;;;;-1:-1:-1;;;;;258:126:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;258:126:35;;-1:-1:-1;258:126:35;-1:-1:-1;258:126:35;:::i;:::-;;566:171;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;566:171:35;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;566:171:35;;;;;;;;;;;;;;390:170;;;;;;;;;;;;;;;;-1:-1:-1;;;;;390:170:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;390:170:35;;-1:-1:-1;390:170:35;-1:-1:-1;390:170:35;:::i;258:126::-;339:38;352:14;:6;-1:-1:-1;;;;;352:12:35;;:14::i;:::-;368:8;;339:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;339:12:35;;-1:-1:-1;;;339:38:35:i;:::-;258:126;;;:::o;566:171::-;654:17;690:40;-1:-1:-1;;;;;690:34:35;;725:4;690:34;:40::i;:::-;683:47;;566:171;;;;;:::o;390:170::-;498:55;511:31;-1:-1:-1;;;;;511:25:35;;537:4;511:25;:31::i;498:55::-;390:170;;;;:::o;906:555:99:-;955:16;1079:4;1073:11;-1:-1:-1;;;1104:3:99;1097:79;1222:6;1216:4;1212:17;1205:4;1200:3;1196:14;1189:41;-1:-1:-1;;;1259:4:99;1254:3;1250:14;1243:90;1373:4;1368:3;1365:1;1358:20;1346:32;-1:-1:-1;;;;;;;1405:22:99;;1397:57;;;;;-1:-1:-1;;;1397:57:99;;;;;;;;;;;;-1:-1:-1;;;1397:57:99;;;;;;;;;;;;;;;906:555;;;:::o;743:224:35:-;828:15;;:19;824:101;;863:51;-1:-1:-1;;;;;863:30:35;;894:8;904:9;863:30;:51::i;:::-;;824:101;939:21;;;-1:-1:-1;;;;;939:21:35;;;;;;;;;;;;;;;743:224;;:::o;3344:189:99:-;3434:17;3470:56;3498:6;3506:4;3520;3470:27;:56::i;1820:590::-;1896:16;2020:4;2014:11;-1:-1:-1;;;2045:3:99;2038:79;2163:6;2157:4;2153:17;2146:4;2141:3;2137:14;2130:41;-1:-1:-1;;;2200:4:99;2195:3;2191:14;2184:90;2321:4;2315;2310:3;2307:1;2299:27;2287:39;-1:-1:-1;;;;;;;2353:22:99;;2345:58;;;;;-1:-1:-1;;;2345:58:99;;;;;;;;;;;;;;;;;;;;;;;;;;;4136:224:135;4235:12;4266:87;4288:6;4296:4;4302:5;4266:87;;;;;;;;;;;;;;;;;:21;:87::i;:::-;4259:94;;4136:224;;;;;;:::o;2520:714:99:-;2753:4;2747:11;-1:-1:-1;;;2771:79:99;;2890:4;2886:17;;;2879:4;2870:14;;2863:41;-1:-1:-1;;;2933:4:99;2924:14;;2917:90;3043:19;;3036:4;3027:14;;3020:43;3092:4;3083:14;;3076:28;3155:4;3140:20;;;3133:4;3124:14;;3117:44;3213:4;3197:14;;3187:31;;2722:506::o;4608:523:135:-;4735:12;4792:5;4767:21;:30;;4759:81;;;;-1:-1:-1;;;4759:81:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;;-1:-1:-1;;;4850:60:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:12;4995:23;5022:6;-1:-1:-1;;;;;5022:11:135;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5022:33:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4980:75;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;4608:523;-1:-1:-1;;;;;;;4608:523:135:o;726:413::-;1086:20;1124:8;;;726:413::o;7091:725::-;7206:12;7234:7;7230:580;;;-1:-1:-1;7264:10:135;7257:17;;7230:580;7375:17;;:21;7371:429;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7772:12;7765:20;;-1:-1:-1;;;7765:20:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    128,
    969
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xFBE133C EQ PUSH2 0x39 JUMPI DUP1 PUSH4 0x360D0FAD EQ PUSH2 0xBB JUMPI DUP1 PUSH4 0x6E9EBC81 EQ PUSH2 0x110 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x195 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1EB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xB9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x209 JUMP JUMPDEST PUSH2 0x1E6 PUSH2 0x1AA DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x225 JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2C7 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x200 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 PUSH2 0x324 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x21F PUSH2 0x1AA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP6 PUSH2 0x331 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH20 0x3D602D80600A3D3981F3363D3D373D3D3D363D73 PUSH1 0x60 SHL DUP2 MSTORE DUP3 PUSH1 0x60 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 PUSH1 0x88 SHL PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x37 DUP2 PUSH1 0x0 CREATE SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2C2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x115490CC4C4D8DCE8818DC99585D194819985A5B1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x2E4 JUMPI PUSH2 0x2E2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP3 CALLVALUE PUSH2 0x3D6 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE SWAP1 MLOAD PUSH32 0x39A773F10839D86923D91D5CE7D6642F2F63A95D850495ABB1F162E38AA04EA5 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP4 DUP4 ADDRESS PUSH2 0x406 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH20 0x3D602D80600A3D3981F3363D3D373D3D3D363D73 PUSH1 0x60 SHL DUP2 MSTORE DUP4 PUSH1 0x60 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 PUSH1 0x88 SHL PUSH1 0x28 DUP3 ADD MSTORE DUP3 PUSH1 0x37 DUP3 PUSH1 0x0 CREATE2 SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x203 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313136373A2063726561746532206661696C6564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x3FC DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x691 PUSH1 0x29 SWAP2 CODECOPY PUSH2 0x464 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0x3D602D80600A3D3981F3363D3D373D3D3D363D73 PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x60 SWAP4 DUP5 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH16 0x5AF43D82803E903D91602B57FD5BF3FF PUSH1 0x80 SHL PUSH1 0x28 DUP3 ADD MSTORE SWAP3 SHL PUSH1 0x38 DUP4 ADD MSTORE PUSH1 0x4C DUP3 ADD MSTORE PUSH1 0x37 DUP1 DUP3 KECCAK256 PUSH1 0x6C DUP4 ADD MSTORE PUSH1 0x55 SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x66B PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4AE DUP6 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x4FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x53E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x51F JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5A0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5A5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x5B5 DUP3 DUP3 DUP7 PUSH2 0x5C6 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x5D5 JUMPI POP DUP2 PUSH2 0x3FF JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x5E5 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x62F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x617 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x65C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C41646472 PUSH6 0x73733A206C6F PUSH24 0x2D6C6576656C2063616C6C20776974682076616C75652066 PUSH2 0x696C PUSH6 0x64A264697066 PUSH20 0x582212209953EEA29C7520F74761B553DB3125D0 SWAP3 ADD 0x4F CALLDATACOPY DUP4 SWAP13 0x23 DIFFICULTY 0xC1 0xE5 0x24 0x1E 0x25 PUSH29 0x5AB264736F6C634300060C003300000000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        128,
        969
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "5": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "8": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "LT",
      "path": "35"
    },
    "9": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x34"
    },
    "12": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "13": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "16": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "SHR",
      "path": "35"
    },
    "19": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "DUP1",
      "path": "35"
    },
    "20": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xFBE133C"
    },
    "25": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "EQ",
      "path": "35"
    },
    "26": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x39"
    },
    "29": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "30": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "DUP1",
      "path": "35"
    },
    "31": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x360D0FAD"
    },
    "36": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "EQ",
      "path": "35"
    },
    "37": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xBB"
    },
    "40": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "41": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "DUP1",
      "path": "35"
    },
    "42": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x6E9EBC81"
    },
    "47": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "EQ",
      "path": "35"
    },
    "48": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x110"
    },
    "51": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "52": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "53": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "55": {
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "DUP1",
      "path": "35"
    },
    "56": {
      "first_revert": true,
      "fn": null,
      "offset": [
        128,
        969
      ],
      "op": "REVERT",
      "path": "35"
    },
    "57": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "58": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xB9"
    },
    "61": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "63": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP1",
      "path": "35"
    },
    "64": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "65": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "SUB",
      "path": "35"
    },
    "66": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "68": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP2",
      "path": "35"
    },
    "69": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "LT",
      "path": "35"
    },
    "70": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "71": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x4F"
    },
    "74": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "75": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "77": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP1",
      "path": "35"
    },
    "78": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "REVERT",
      "path": "35"
    },
    "79": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "80": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "82": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "84": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "86": {
      "op": "SHL"
    },
    "87": {
      "op": "SUB"
    },
    "88": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP3",
      "path": "35"
    },
    "89": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "90": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "AND",
      "path": "35"
    },
    "91": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "92": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "93": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP2",
      "path": "35"
    },
    "94": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ADD",
      "path": "35"
    },
    "95": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "96": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "98": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP2",
      "path": "35"
    },
    "99": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ADD",
      "path": "35"
    },
    "100": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "102": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP3",
      "path": "35"
    },
    "103": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ADD",
      "path": "35"
    },
    "104": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "105": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH5",
      "path": "35",
      "value": "0x100000000"
    },
    "111": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP2",
      "path": "35"
    },
    "112": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "GT",
      "path": "35"
    },
    "113": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "114": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x7A"
    },
    "117": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "118": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "120": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP1",
      "path": "35"
    },
    "121": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "REVERT",
      "path": "35"
    },
    "122": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "123": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP3",
      "path": "35"
    },
    "124": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ADD",
      "path": "35"
    },
    "125": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP4",
      "path": "35"
    },
    "126": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "128": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP3",
      "path": "35"
    },
    "129": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ADD",
      "path": "35"
    },
    "130": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "GT",
      "path": "35"
    },
    "131": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "132": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x8C"
    },
    "135": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "136": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "138": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP1",
      "path": "35"
    },
    "139": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "REVERT",
      "path": "35"
    },
    "140": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "141": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP1",
      "path": "35"
    },
    "142": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "143": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "144": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "146": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ADD",
      "path": "35"
    },
    "147": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "148": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP5",
      "path": "35"
    },
    "149": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1"
    },
    "151": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP4",
      "path": "35"
    },
    "152": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "MUL",
      "path": "35"
    },
    "153": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP5",
      "path": "35"
    },
    "154": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ADD",
      "path": "35"
    },
    "155": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "GT",
      "path": "35"
    },
    "156": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH5",
      "path": "35",
      "value": "0x100000000"
    },
    "162": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP4",
      "path": "35"
    },
    "163": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "GT",
      "path": "35"
    },
    "164": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "OR",
      "path": "35"
    },
    "165": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "166": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xAE"
    },
    "169": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "170": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "172": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "DUP1",
      "path": "35"
    },
    "173": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "REVERT",
      "path": "35"
    },
    "174": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "175": {
      "op": "POP"
    },
    "176": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "177": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "178": {
      "op": "POP"
    },
    "179": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "180": {
      "op": "POP"
    },
    "181": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x195"
    },
    "184": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        258,
        384
      ],
      "op": "JUMP",
      "path": "35"
    },
    "185": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "186": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "STOP",
      "path": "35"
    },
    "187": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "188": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "CALLVALUE",
      "path": "35"
    },
    "189": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "DUP1",
      "path": "35"
    },
    "190": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "191": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xC7"
    },
    "194": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "195": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "197": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "DUP1",
      "path": "35"
    },
    "198": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "REVERT",
      "path": "35"
    },
    "199": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "200": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "POP",
      "path": "35"
    },
    "201": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xF4"
    },
    "204": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "206": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "DUP1",
      "path": "35"
    },
    "207": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "208": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "SUB",
      "path": "35"
    },
    "209": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "211": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "DUP2",
      "path": "35"
    },
    "212": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "LT",
      "path": "35"
    },
    "213": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "214": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xDE"
    },
    "217": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "218": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "220": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "DUP1",
      "path": "35"
    },
    "221": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "REVERT",
      "path": "35"
    },
    "222": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "223": {
      "op": "POP"
    },
    "224": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "226": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "228": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "230": {
      "op": "SHL"
    },
    "231": {
      "op": "SUB"
    },
    "232": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "DUP2",
      "path": "35"
    },
    "233": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "234": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "AND",
      "path": "35"
    },
    "235": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "236": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "238": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "ADD",
      "path": "35"
    },
    "239": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "240": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1EB"
    },
    "243": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "i",
      "offset": [
        566,
        737
      ],
      "op": "JUMP",
      "path": "35"
    },
    "244": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "245": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "247": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "DUP1",
      "path": "35"
    },
    "248": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "249": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "251": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "253": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "255": {
      "op": "SHL"
    },
    "256": {
      "op": "SUB"
    },
    "257": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "258": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "259": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "AND",
      "path": "35"
    },
    "260": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "DUP3",
      "path": "35"
    },
    "261": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "262": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "263": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "264": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "DUP2",
      "path": "35"
    },
    "265": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "266": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "SUB",
      "path": "35"
    },
    "267": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "269": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "ADD",
      "path": "35"
    },
    "270": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "271": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "RETURN",
      "path": "35"
    },
    "272": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "273": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xB9"
    },
    "276": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "278": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP1",
      "path": "35"
    },
    "279": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "280": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "SUB",
      "path": "35"
    },
    "281": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x60"
    },
    "283": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP2",
      "path": "35"
    },
    "284": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "LT",
      "path": "35"
    },
    "285": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "286": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x126"
    },
    "289": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "290": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "292": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP1",
      "path": "35"
    },
    "293": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "REVERT",
      "path": "35"
    },
    "294": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "295": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "297": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "299": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "301": {
      "op": "SHL"
    },
    "302": {
      "op": "SUB"
    },
    "303": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP3",
      "path": "35"
    },
    "304": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "305": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "AND",
      "path": "35"
    },
    "306": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "307": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "309": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP2",
      "path": "35"
    },
    "310": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ADD",
      "path": "35"
    },
    "311": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "312": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "313": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP2",
      "path": "35"
    },
    "314": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ADD",
      "path": "35"
    },
    "315": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "316": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x60"
    },
    "318": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP2",
      "path": "35"
    },
    "319": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ADD",
      "path": "35"
    },
    "320": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "322": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP3",
      "path": "35"
    },
    "323": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ADD",
      "path": "35"
    },
    "324": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "325": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH5",
      "path": "35",
      "value": "0x100000000"
    },
    "331": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP2",
      "path": "35"
    },
    "332": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "GT",
      "path": "35"
    },
    "333": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "334": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x156"
    },
    "337": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "338": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "340": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP1",
      "path": "35"
    },
    "341": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "REVERT",
      "path": "35"
    },
    "342": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "343": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP3",
      "path": "35"
    },
    "344": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ADD",
      "path": "35"
    },
    "345": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP4",
      "path": "35"
    },
    "346": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "348": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP3",
      "path": "35"
    },
    "349": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ADD",
      "path": "35"
    },
    "350": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "GT",
      "path": "35"
    },
    "351": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "352": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x168"
    },
    "355": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "356": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "358": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP1",
      "path": "35"
    },
    "359": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "REVERT",
      "path": "35"
    },
    "360": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "361": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP1",
      "path": "35"
    },
    "362": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "363": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "364": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "366": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ADD",
      "path": "35"
    },
    "367": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "368": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP5",
      "path": "35"
    },
    "369": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1"
    },
    "371": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP4",
      "path": "35"
    },
    "372": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "MUL",
      "path": "35"
    },
    "373": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP5",
      "path": "35"
    },
    "374": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ADD",
      "path": "35"
    },
    "375": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "GT",
      "path": "35"
    },
    "376": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH5",
      "path": "35",
      "value": "0x100000000"
    },
    "382": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP4",
      "path": "35"
    },
    "383": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "GT",
      "path": "35"
    },
    "384": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "OR",
      "path": "35"
    },
    "385": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "386": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x18A"
    },
    "389": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "390": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "392": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "DUP1",
      "path": "35"
    },
    "393": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "REVERT",
      "path": "35"
    },
    "394": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "395": {
      "op": "POP"
    },
    "396": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "397": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "398": {
      "op": "POP"
    },
    "399": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "400": {
      "op": "POP"
    },
    "401": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x209"
    },
    "404": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "i",
      "offset": [
        390,
        560
      ],
      "op": "JUMP",
      "path": "35"
    },
    "405": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "406": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "PUSH2",
      "path": "35",
      "statement": 0,
      "value": "0x1E6"
    },
    "409": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        366
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1AA"
    },
    "412": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        358
      ],
      "op": "DUP5",
      "path": "35"
    },
    "413": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "415": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "417": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "419": {
      "op": "SHL"
    },
    "420": {
      "op": "SUB"
    },
    "421": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        364
      ],
      "op": "AND",
      "path": "35"
    },
    "422": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        364
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x225"
    },
    "425": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        352,
        366
      ],
      "op": "JUMP",
      "path": "35"
    },
    "426": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        366
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "427": {
      "fn": "ClonesMock.clone",
      "offset": [
        368,
        376
      ],
      "op": "DUP4",
      "path": "35"
    },
    "428": {
      "fn": "ClonesMock.clone",
      "offset": [
        368,
        376
      ],
      "op": "DUP4",
      "path": "35"
    },
    "429": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP1",
      "path": "35"
    },
    "430": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP1",
      "path": "35"
    },
    "431": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1F"
    },
    "433": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "ADD",
      "path": "35"
    },
    "434": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "436": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP1",
      "path": "35"
    },
    "437": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "438": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DIV",
      "path": "35"
    },
    "439": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "MUL",
      "path": "35"
    },
    "440": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "442": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "ADD",
      "path": "35"
    },
    "443": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "445": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "446": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "447": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP2",
      "path": "35"
    },
    "448": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "ADD",
      "path": "35"
    },
    "449": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "451": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "452": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP1",
      "path": "35"
    },
    "453": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "SWAP4",
      "path": "35"
    },
    "454": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "455": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "456": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "457": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP2",
      "path": "35"
    },
    "458": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP2",
      "path": "35"
    },
    "459": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "460": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "462": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "ADD",
      "path": "35"
    },
    "463": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP4",
      "path": "35"
    },
    "464": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP4",
      "path": "35"
    },
    "465": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP1",
      "path": "35"
    },
    "466": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP3",
      "path": "35"
    },
    "467": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "DUP5",
      "path": "35"
    },
    "468": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "CALLDATACOPY",
      "path": "35"
    },
    "469": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "471": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "472": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "ADD",
      "path": "35"
    },
    "473": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "474": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "475": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "476": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "477": {
      "op": "POP"
    },
    "478": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        351
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2C7"
    },
    "481": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        351
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "482": {
      "op": "POP"
    },
    "483": {
      "op": "POP"
    },
    "484": {
      "op": "POP"
    },
    "485": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        339,
        377
      ],
      "op": "JUMP",
      "path": "35"
    },
    "486": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        377
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "487": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "POP",
      "path": "35"
    },
    "488": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "POP",
      "path": "35"
    },
    "489": {
      "fn": "ClonesMock.clone",
      "offset": [
        258,
        384
      ],
      "op": "POP",
      "path": "35"
    },
    "490": {
      "fn": "ClonesMock.clone",
      "jump": "o",
      "offset": [
        258,
        384
      ],
      "op": "JUMP",
      "path": "35"
    },
    "491": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "492": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        654,
        671
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "494": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        690,
        730
      ],
      "op": "PUSH2",
      "path": "35",
      "statement": 1,
      "value": "0x200"
    },
    "497": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "499": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "501": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "503": {
      "op": "SHL"
    },
    "504": {
      "op": "SUB"
    },
    "505": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        690,
        724
      ],
      "op": "DUP5",
      "path": "35"
    },
    "506": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        690,
        724
      ],
      "op": "AND",
      "path": "35"
    },
    "507": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        725,
        729
      ],
      "op": "DUP4",
      "path": "35"
    },
    "508": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        690,
        724
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x324"
    },
    "511": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "i",
      "offset": [
        690,
        730
      ],
      "op": "JUMP",
      "path": "35"
    },
    "512": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        690,
        730
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "513": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        683,
        730
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "514": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        683,
        730
      ],
      "op": "POP",
      "path": "35"
    },
    "515": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "516": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "517": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "518": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "POP",
      "path": "35"
    },
    "519": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        566,
        737
      ],
      "op": "POP",
      "path": "35"
    },
    "520": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "o",
      "offset": [
        566,
        737
      ],
      "op": "JUMP",
      "path": "35"
    },
    "521": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "522": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        498,
        553
      ],
      "op": "PUSH2",
      "path": "35",
      "statement": 2,
      "value": "0x21F"
    },
    "525": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        511,
        542
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1AA"
    },
    "528": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "530": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "532": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "534": {
      "op": "SHL"
    },
    "535": {
      "op": "SUB"
    },
    "536": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        511,
        536
      ],
      "op": "DUP7",
      "path": "35"
    },
    "537": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        511,
        536
      ],
      "op": "AND",
      "path": "35"
    },
    "538": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        537,
        541
      ],
      "op": "DUP6",
      "path": "35"
    },
    "539": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        511,
        536
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x331"
    },
    "542": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "i",
      "offset": [
        511,
        542
      ],
      "op": "JUMP",
      "path": "35"
    },
    "543": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        498,
        553
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "544": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "POP",
      "path": "35"
    },
    "545": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "POP",
      "path": "35"
    },
    "546": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "POP",
      "path": "35"
    },
    "547": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        390,
        560
      ],
      "op": "POP",
      "path": "35"
    },
    "548": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "o",
      "offset": [
        390,
        560
      ],
      "op": "JUMP",
      "path": "35"
    },
    "549": {
      "fn": "Clones.clone",
      "offset": [
        906,
        1461
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "550": {
      "fn": "Clones.clone",
      "offset": [
        955,
        971
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "552": {
      "fn": "Clones.clone",
      "offset": [
        1079,
        1083
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "554": {
      "fn": "Clones.clone",
      "offset": [
        1073,
        1084
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "555": {
      "op": "PUSH20",
      "value": "0x3D602D80600A3D3981F3363D3D373D3D3D363D73"
    },
    "576": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "578": {
      "op": "SHL"
    },
    "579": {
      "fn": "Clones.clone",
      "offset": [
        1104,
        1107
      ],
      "op": "DUP2",
      "path": "99"
    },
    "580": {
      "fn": "Clones.clone",
      "offset": [
        1097,
        1176
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "581": {
      "fn": "Clones.clone",
      "offset": [
        1222,
        1228
      ],
      "op": "DUP3",
      "path": "99"
    },
    "582": {
      "fn": "Clones.clone",
      "offset": [
        1216,
        1220
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x60"
    },
    "584": {
      "fn": "Clones.clone",
      "offset": [
        1212,
        1229
      ],
      "op": "SHL",
      "path": "99"
    },
    "585": {
      "fn": "Clones.clone",
      "offset": [
        1205,
        1209
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x14"
    },
    "587": {
      "fn": "Clones.clone",
      "offset": [
        1200,
        1203
      ],
      "op": "DUP3",
      "path": "99"
    },
    "588": {
      "fn": "Clones.clone",
      "offset": [
        1196,
        1210
      ],
      "op": "ADD",
      "path": "99"
    },
    "589": {
      "fn": "Clones.clone",
      "offset": [
        1189,
        1230
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "590": {
      "op": "PUSH15",
      "value": "0x5AF43D82803E903D91602B57FD5BF3"
    },
    "606": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "608": {
      "op": "SHL"
    },
    "609": {
      "fn": "Clones.clone",
      "offset": [
        1259,
        1263
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x28"
    },
    "611": {
      "fn": "Clones.clone",
      "offset": [
        1254,
        1257
      ],
      "op": "DUP3",
      "path": "99"
    },
    "612": {
      "fn": "Clones.clone",
      "offset": [
        1250,
        1264
      ],
      "op": "ADD",
      "path": "99"
    },
    "613": {
      "fn": "Clones.clone",
      "offset": [
        1243,
        1333
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "614": {
      "fn": "Clones.clone",
      "offset": [
        1373,
        1377
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x37"
    },
    "616": {
      "fn": "Clones.clone",
      "offset": [
        1368,
        1371
      ],
      "op": "DUP2",
      "path": "99"
    },
    "617": {
      "fn": "Clones.clone",
      "offset": [
        1365,
        1366
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "619": {
      "fn": "Clones.clone",
      "offset": [
        1358,
        1378
      ],
      "op": "CREATE",
      "path": "99"
    },
    "620": {
      "fn": "Clones.clone",
      "offset": [
        1346,
        1378
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "621": {
      "op": "POP"
    },
    "622": {
      "op": "POP"
    },
    "623": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "625": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "627": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "629": {
      "op": "SHL"
    },
    "630": {
      "op": "SUB"
    },
    "631": {
      "fn": "Clones.clone",
      "offset": [
        1405,
        1427
      ],
      "op": "DUP2",
      "path": "99",
      "statement": 3
    },
    "632": {
      "branch": 20,
      "fn": "Clones.clone",
      "offset": [
        1405,
        1427
      ],
      "op": "AND",
      "path": "99"
    },
    "633": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x2C2"
    },
    "636": {
      "branch": 20,
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "637": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "639": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "DUP1",
      "path": "99"
    },
    "640": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "641": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "645": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "647": {
      "op": "SHL"
    },
    "648": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "DUP2",
      "path": "99"
    },
    "649": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "650": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x20"
    },
    "652": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "654": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "DUP3",
      "path": "99"
    },
    "655": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "ADD",
      "path": "99"
    },
    "656": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "657": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x16"
    },
    "659": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x24"
    },
    "661": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "DUP3",
      "path": "99"
    },
    "662": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "ADD",
      "path": "99"
    },
    "663": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "664": {
      "op": "PUSH22",
      "value": "0x115490CC4C4D8DCE8818DC99585D194819985A5B1959"
    },
    "687": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "689": {
      "op": "SHL"
    },
    "690": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x44"
    },
    "692": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "DUP3",
      "path": "99"
    },
    "693": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "ADD",
      "path": "99"
    },
    "694": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "695": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "696": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "697": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "698": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "DUP2",
      "path": "99"
    },
    "699": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "700": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "SUB",
      "path": "99"
    },
    "701": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x64"
    },
    "703": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "ADD",
      "path": "99"
    },
    "704": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "705": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "REVERT",
      "path": "99"
    },
    "706": {
      "fn": "Clones.clone",
      "offset": [
        1397,
        1454
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "707": {
      "fn": "Clones.clone",
      "offset": [
        906,
        1461
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "708": {
      "fn": "Clones.clone",
      "offset": [
        906,
        1461
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "709": {
      "fn": "Clones.clone",
      "offset": [
        906,
        1461
      ],
      "op": "POP",
      "path": "99"
    },
    "710": {
      "fn": "Clones.clone",
      "jump": "o",
      "offset": [
        906,
        1461
      ],
      "op": "JUMP",
      "path": "99"
    },
    "711": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        743,
        967
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "712": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        828,
        843
      ],
      "op": "DUP1",
      "path": "35"
    },
    "713": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        828,
        843
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "714": {
      "branch": 15,
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        828,
        847
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "715": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        824,
        925
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2E4"
    },
    "718": {
      "branch": 15,
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        824,
        925
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "719": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        863,
        914
      ],
      "op": "PUSH2",
      "path": "35",
      "statement": 4,
      "value": "0x2E2"
    },
    "722": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "724": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "726": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "728": {
      "op": "SHL"
    },
    "729": {
      "op": "SUB"
    },
    "730": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        863,
        893
      ],
      "op": "DUP4",
      "path": "35"
    },
    "731": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        863,
        893
      ],
      "op": "AND",
      "path": "35"
    },
    "732": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        894,
        902
      ],
      "op": "DUP3",
      "path": "35"
    },
    "733": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        904,
        913
      ],
      "op": "CALLVALUE",
      "path": "35"
    },
    "734": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        863,
        893
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x3D6"
    },
    "737": {
      "fn": "ClonesMock._initAndEmit",
      "jump": "i",
      "offset": [
        863,
        914
      ],
      "op": "JUMP",
      "path": "35"
    },
    "738": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        863,
        914
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "739": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        863,
        914
      ],
      "op": "POP",
      "path": "35"
    },
    "740": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        824,
        925
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "741": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 5,
      "value": "0x40"
    },
    "743": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "DUP1",
      "path": "35"
    },
    "744": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "745": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "747": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "749": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "751": {
      "op": "SHL"
    },
    "752": {
      "op": "SUB"
    },
    "753": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "DUP5",
      "path": "35"
    },
    "754": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "AND",
      "path": "35"
    },
    "755": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "DUP2",
      "path": "35"
    },
    "756": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "757": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "758": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "759": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "PUSH32",
      "path": "35",
      "value": "0x39A773F10839D86923D91D5CE7D6642F2F63A95D850495ABB1F162E38AA04EA5"
    },
    "792": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "793": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "DUP2",
      "path": "35"
    },
    "794": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "795": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "SUB",
      "path": "35"
    },
    "796": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "798": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "ADD",
      "path": "35"
    },
    "799": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "800": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        939,
        960
      ],
      "op": "LOG1",
      "path": "35"
    },
    "801": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        743,
        967
      ],
      "op": "POP",
      "path": "35"
    },
    "802": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        743,
        967
      ],
      "op": "POP",
      "path": "35"
    },
    "803": {
      "fn": "ClonesMock._initAndEmit",
      "jump": "o",
      "offset": [
        743,
        967
      ],
      "op": "JUMP",
      "path": "35"
    },
    "804": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3344,
        3533
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "805": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3434,
        3451
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "807": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3470,
        3526
      ],
      "op": "PUSH2",
      "path": "99",
      "statement": 6,
      "value": "0x200"
    },
    "810": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3498,
        3504
      ],
      "op": "DUP4",
      "path": "99"
    },
    "811": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3506,
        3510
      ],
      "op": "DUP4",
      "path": "99"
    },
    "812": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3520,
        3524
      ],
      "op": "ADDRESS",
      "path": "99"
    },
    "813": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3470,
        3497
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x406"
    },
    "816": {
      "fn": "Clones.predictDeterministicAddress",
      "jump": "i",
      "offset": [
        3470,
        3526
      ],
      "op": "JUMP",
      "path": "99"
    },
    "817": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        1820,
        2410
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "818": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        1896,
        1912
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "820": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2020,
        2024
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "822": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2014,
        2025
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "823": {
      "op": "PUSH20",
      "value": "0x3D602D80600A3D3981F3363D3D373D3D3D363D73"
    },
    "844": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "846": {
      "op": "SHL"
    },
    "847": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2045,
        2048
      ],
      "op": "DUP2",
      "path": "99"
    },
    "848": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2038,
        2117
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "849": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2163,
        2169
      ],
      "op": "DUP4",
      "path": "99"
    },
    "850": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2157,
        2161
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x60"
    },
    "852": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2153,
        2170
      ],
      "op": "SHL",
      "path": "99"
    },
    "853": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2146,
        2150
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x14"
    },
    "855": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2141,
        2144
      ],
      "op": "DUP3",
      "path": "99"
    },
    "856": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2137,
        2151
      ],
      "op": "ADD",
      "path": "99"
    },
    "857": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2130,
        2171
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "858": {
      "op": "PUSH15",
      "value": "0x5AF43D82803E903D91602B57FD5BF3"
    },
    "874": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "876": {
      "op": "SHL"
    },
    "877": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2200,
        2204
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x28"
    },
    "879": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2195,
        2198
      ],
      "op": "DUP3",
      "path": "99"
    },
    "880": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2191,
        2205
      ],
      "op": "ADD",
      "path": "99"
    },
    "881": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2184,
        2274
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "882": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2321,
        2325
      ],
      "op": "DUP3",
      "path": "99"
    },
    "883": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2315,
        2319
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x37"
    },
    "885": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2310,
        2313
      ],
      "op": "DUP3",
      "path": "99"
    },
    "886": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2307,
        2308
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "888": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2299,
        2326
      ],
      "op": "CREATE2",
      "path": "99"
    },
    "889": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2287,
        2326
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "890": {
      "op": "POP"
    },
    "891": {
      "op": "POP"
    },
    "892": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "894": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "896": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "898": {
      "op": "SHL"
    },
    "899": {
      "op": "SUB"
    },
    "900": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2353,
        2375
      ],
      "op": "DUP2",
      "path": "99",
      "statement": 7
    },
    "901": {
      "branch": 21,
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2353,
        2375
      ],
      "op": "AND",
      "path": "99"
    },
    "902": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x203"
    },
    "905": {
      "branch": 21,
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "906": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "908": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "DUP1",
      "path": "99"
    },
    "909": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "910": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "914": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "916": {
      "op": "SHL"
    },
    "917": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "DUP2",
      "path": "99"
    },
    "918": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "919": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x20"
    },
    "921": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "923": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "DUP3",
      "path": "99"
    },
    "924": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "ADD",
      "path": "99"
    },
    "925": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "926": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x17"
    },
    "928": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x24"
    },
    "930": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "DUP3",
      "path": "99"
    },
    "931": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "ADD",
      "path": "99"
    },
    "932": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "933": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "PUSH32",
      "path": "99",
      "value": "0x455243313136373A2063726561746532206661696C6564000000000000000000"
    },
    "966": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x44"
    },
    "968": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "DUP3",
      "path": "99"
    },
    "969": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "ADD",
      "path": "99"
    },
    "970": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "971": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "972": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "973": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "974": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "DUP2",
      "path": "99"
    },
    "975": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "976": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "SUB",
      "path": "99"
    },
    "977": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x64"
    },
    "979": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "ADD",
      "path": "99"
    },
    "980": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "981": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2345,
        2403
      ],
      "op": "REVERT",
      "path": "99"
    },
    "982": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4136,
        4360
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "983": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4235,
        4247
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x60"
    },
    "985": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "PUSH2",
      "path": "135",
      "statement": 8,
      "value": "0x3FC"
    },
    "988": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4288,
        4294
      ],
      "op": "DUP5",
      "path": "135"
    },
    "989": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4296,
        4300
      ],
      "op": "DUP5",
      "path": "135"
    },
    "990": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4302,
        4307
      ],
      "op": "DUP5",
      "path": "135"
    },
    "991": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "993": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "994": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "DUP1",
      "path": "135"
    },
    "995": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x60"
    },
    "997": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "ADD",
      "path": "135"
    },
    "998": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1000": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1001": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1002": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x29"
    },
    "1004": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1005": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1006": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1008": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "ADD",
      "path": "135"
    },
    "1009": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x691"
    },
    "1012": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x29"
    },
    "1014": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1015": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "CODECOPY",
      "path": "135"
    },
    "1016": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4287
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x464"
    },
    "1019": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        4266,
        4353
      ],
      "op": "JUMP",
      "path": "135"
    },
    "1020": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4266,
        4353
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1021": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4259,
        4353
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1022": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4259,
        4353
      ],
      "op": "POP",
      "path": "135"
    },
    "1023": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4136,
        4360
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1024": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4136,
        4360
      ],
      "op": "SWAP4",
      "path": "135"
    },
    "1025": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4136,
        4360
      ],
      "op": "SWAP3",
      "path": "135"
    },
    "1026": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4136,
        4360
      ],
      "op": "POP",
      "path": "135"
    },
    "1027": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4136,
        4360
      ],
      "op": "POP",
      "path": "135"
    },
    "1028": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4136,
        4360
      ],
      "op": "POP",
      "path": "135"
    },
    "1029": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4136,
        4360
      ],
      "op": "JUMP",
      "path": "135"
    },
    "1030": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2520,
        3234
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1031": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2753,
        2757
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1033": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2747,
        2758
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1034": {
      "op": "PUSH20",
      "value": "0x3D602D80600A3D3981F3363D3D373D3D3D363D73"
    },
    "1055": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1057": {
      "op": "SHL"
    },
    "1058": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2771,
        2850
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1059": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2771,
        2850
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1060": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2890,
        2894
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x60"
    },
    "1062": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2886,
        2903
      ],
      "op": "SWAP4",
      "path": "99"
    },
    "1063": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2886,
        2903
      ],
      "op": "DUP5",
      "path": "99"
    },
    "1064": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2886,
        2903
      ],
      "op": "SHL",
      "path": "99"
    },
    "1065": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2879,
        2883
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x14"
    },
    "1067": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2870,
        2884
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1068": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2870,
        2884
      ],
      "op": "ADD",
      "path": "99"
    },
    "1069": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2863,
        2904
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1070": {
      "op": "PUSH16",
      "value": "0x5AF43D82803E903D91602B57FD5BF3FF"
    },
    "1087": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1089": {
      "op": "SHL"
    },
    "1090": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2933,
        2937
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x28"
    },
    "1092": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2924,
        2938
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1093": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2924,
        2938
      ],
      "op": "ADD",
      "path": "99"
    },
    "1094": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2917,
        3007
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1095": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3043,
        3062
      ],
      "op": "SWAP3",
      "path": "99"
    },
    "1096": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3043,
        3062
      ],
      "op": "SHL",
      "path": "99"
    },
    "1097": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3036,
        3040
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x38"
    },
    "1099": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3027,
        3041
      ],
      "op": "DUP4",
      "path": "99"
    },
    "1100": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3027,
        3041
      ],
      "op": "ADD",
      "path": "99"
    },
    "1101": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3020,
        3063
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1102": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3092,
        3096
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4C"
    },
    "1104": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3083,
        3097
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1105": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3083,
        3097
      ],
      "op": "ADD",
      "path": "99"
    },
    "1106": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3076,
        3104
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1107": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3155,
        3159
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x37"
    },
    "1109": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3140,
        3160
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1110": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3140,
        3160
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1111": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3140,
        3160
      ],
      "op": "KECCAK256",
      "path": "99"
    },
    "1112": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3133,
        3137
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x6C"
    },
    "1114": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3124,
        3138
      ],
      "op": "DUP4",
      "path": "99"
    },
    "1115": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3124,
        3138
      ],
      "op": "ADD",
      "path": "99"
    },
    "1116": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3117,
        3161
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1117": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3213,
        3217
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x55"
    },
    "1119": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3197,
        3211
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "1120": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3197,
        3211
      ],
      "op": "ADD",
      "path": "99"
    },
    "1121": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3187,
        3218
      ],
      "op": "KECCAK256",
      "path": "99"
    },
    "1122": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3187,
        3218
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1123": {
      "fn": "Clones.predictDeterministicAddress",
      "jump": "o",
      "offset": [
        2722,
        3228
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1124": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4608,
        5131
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1125": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4735,
        4747
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x60"
    },
    "1127": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4792,
        4797
      ],
      "op": "DUP3",
      "path": "135",
      "statement": 9
    },
    "1128": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4767,
        4788
      ],
      "op": "SELFBALANCE",
      "path": "135"
    },
    "1129": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4767,
        4797
      ],
      "op": "LT",
      "path": "135"
    },
    "1130": {
      "branch": 16,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4767,
        4797
      ],
      "op": "ISZERO",
      "path": "135"
    },
    "1131": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x4A5"
    },
    "1134": {
      "branch": 16,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "JUMPI",
      "path": "135"
    },
    "1135": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1137": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1138": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1142": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1144": {
      "op": "SHL"
    },
    "1145": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1146": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1147": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x4"
    },
    "1149": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "ADD",
      "path": "135"
    },
    "1150": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1151": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1152": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1154": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "ADD",
      "path": "135"
    },
    "1155": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1156": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1157": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "SUB",
      "path": "135"
    },
    "1158": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1159": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1160": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x26"
    },
    "1162": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1163": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1164": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1166": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "ADD",
      "path": "135"
    },
    "1167": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1168": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x66B"
    },
    "1171": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x26"
    },
    "1173": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1174": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "CODECOPY",
      "path": "135"
    },
    "1175": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1177": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "ADD",
      "path": "135"
    },
    "1178": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1179": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "POP",
      "path": "135"
    },
    "1180": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "POP",
      "path": "135"
    },
    "1181": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1183": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1184": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1185": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1186": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "SUB",
      "path": "135"
    },
    "1187": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1188": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "REVERT",
      "path": "135"
    },
    "1189": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4840
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1190": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4858,
        4876
      ],
      "op": "PUSH2",
      "path": "135",
      "statement": 10,
      "value": "0x4AE"
    },
    "1193": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4869,
        4875
      ],
      "op": "DUP6",
      "path": "135"
    },
    "1194": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4858,
        4868
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x5C0"
    },
    "1197": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        4858,
        4876
      ],
      "op": "JUMP",
      "path": "135"
    },
    "1198": {
      "branch": 17,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4858,
        4876
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1199": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x4FF"
    },
    "1202": {
      "branch": 17,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "JUMPI",
      "path": "135"
    },
    "1203": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1205": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1206": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1207": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1211": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1213": {
      "op": "SHL"
    },
    "1214": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1215": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1216": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1218": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x4"
    },
    "1220": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1221": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "ADD",
      "path": "135"
    },
    "1222": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1223": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x1D"
    },
    "1225": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x24"
    },
    "1227": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1228": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "ADD",
      "path": "135"
    },
    "1229": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1230": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "PUSH32",
      "path": "135",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "1263": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x44"
    },
    "1265": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1266": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "ADD",
      "path": "135"
    },
    "1267": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1268": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1269": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1270": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1271": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1272": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1273": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "SUB",
      "path": "135"
    },
    "1274": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x64"
    },
    "1276": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "ADD",
      "path": "135"
    },
    "1277": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1278": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "REVERT",
      "path": "135"
    },
    "1279": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4850,
        4910
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1280": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4981,
        4993
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x0"
    },
    "1282": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4995,
        5018
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x60"
    },
    "1284": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5028
      ],
      "op": "DUP7",
      "path": "135"
    },
    "1285": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1287": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1289": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1291": {
      "op": "SHL"
    },
    "1292": {
      "op": "SUB"
    },
    "1293": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5033
      ],
      "op": "AND",
      "path": "135"
    },
    "1294": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5042,
        5047
      ],
      "op": "DUP6",
      "path": "135"
    },
    "1295": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5050,
        5054
      ],
      "op": "DUP8",
      "path": "135"
    },
    "1296": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1298": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1299": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1300": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1301": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1302": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1303": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1304": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1306": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "ADD",
      "path": "135"
    },
    "1307": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1308": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1309": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1310": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1311": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1312": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1314": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1315": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "LT",
      "path": "135"
    },
    "1316": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x53E"
    },
    "1319": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "JUMPI",
      "path": "135"
    },
    "1320": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1321": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1322": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1323": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1324": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1326": {
      "op": "NOT"
    },
    "1327": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1328": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP3",
      "path": "135"
    },
    "1329": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "ADD",
      "path": "135"
    },
    "1330": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1331": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1333": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1334": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1335": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "ADD",
      "path": "135"
    },
    "1336": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1337": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "ADD",
      "path": "135"
    },
    "1338": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x51F"
    },
    "1341": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "JUMP",
      "path": "135"
    },
    "1342": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1343": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x1"
    },
    "1345": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1346": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1348": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SUB",
      "path": "135"
    },
    "1349": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x100"
    },
    "1352": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "EXP",
      "path": "135"
    },
    "1353": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SUB",
      "path": "135"
    },
    "1354": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1355": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "NOT",
      "path": "135"
    },
    "1356": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1357": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1358": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "AND",
      "path": "135"
    },
    "1359": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1360": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP5",
      "path": "135"
    },
    "1361": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1362": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "AND",
      "path": "135"
    },
    "1363": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1364": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1365": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "OR",
      "path": "135"
    },
    "1366": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP6",
      "path": "135"
    },
    "1367": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1368": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1369": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1370": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1371": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1372": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1373": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1374": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1375": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1376": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "ADD",
      "path": "135"
    },
    "1377": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1378": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1379": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1380": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x0"
    },
    "1382": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1384": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1385": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1386": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1387": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SUB",
      "path": "135"
    },
    "1388": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1389": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP6",
      "path": "135"
    },
    "1390": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP8",
      "path": "135"
    },
    "1391": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "GAS",
      "path": "135"
    },
    "1392": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "CALL",
      "path": "135"
    },
    "1393": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP3",
      "path": "135"
    },
    "1394": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1395": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1396": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1397": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "RETURNDATASIZE",
      "path": "135"
    },
    "1398": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1399": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x0"
    },
    "1401": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1402": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "EQ",
      "path": "135"
    },
    "1403": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x5A0"
    },
    "1406": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "JUMPI",
      "path": "135"
    },
    "1407": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1409": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1410": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1411": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1412": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x1F"
    },
    "1414": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "NOT",
      "path": "135"
    },
    "1415": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x3F"
    },
    "1417": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "RETURNDATASIZE",
      "path": "135"
    },
    "1418": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "ADD",
      "path": "135"
    },
    "1419": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "AND",
      "path": "135"
    },
    "1420": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1421": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "ADD",
      "path": "135"
    },
    "1422": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1424": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1425": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "RETURNDATASIZE",
      "path": "135"
    },
    "1426": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1427": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1428": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "RETURNDATASIZE",
      "path": "135"
    },
    "1429": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x0"
    },
    "1431": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1433": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "DUP5",
      "path": "135"
    },
    "1434": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "ADD",
      "path": "135"
    },
    "1435": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "RETURNDATACOPY",
      "path": "135"
    },
    "1436": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x5A5"
    },
    "1439": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "JUMP",
      "path": "135"
    },
    "1440": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1441": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x60"
    },
    "1443": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1444": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1445": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1446": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5022,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1447": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4980,
        5055
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1448": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4980,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1449": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4980,
        5055
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1450": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4980,
        5055
      ],
      "op": "POP",
      "path": "135"
    },
    "1451": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5072,
        5124
      ],
      "op": "PUSH2",
      "path": "135",
      "statement": 11,
      "value": "0x5B5"
    },
    "1454": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5090,
        5097
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1455": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5099,
        5109
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1456": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5111,
        5123
      ],
      "op": "DUP7",
      "path": "135"
    },
    "1457": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5072,
        5089
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x5C6"
    },
    "1460": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5072,
        5124
      ],
      "op": "JUMP",
      "path": "135"
    },
    "1461": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5072,
        5124
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1462": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5065,
        5124
      ],
      "op": "SWAP8",
      "path": "135"
    },
    "1463": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4608,
        5131
      ],
      "op": "SWAP7",
      "path": "135"
    },
    "1464": {
      "op": "POP"
    },
    "1465": {
      "op": "POP"
    },
    "1466": {
      "op": "POP"
    },
    "1467": {
      "op": "POP"
    },
    "1468": {
      "op": "POP"
    },
    "1469": {
      "op": "POP"
    },
    "1470": {
      "op": "POP"
    },
    "1471": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4608,
        5131
      ],
      "op": "JUMP",
      "path": "135"
    },
    "1472": {
      "fn": "Address.isContract",
      "offset": [
        726,
        1139
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1473": {
      "fn": "Address.isContract",
      "offset": [
        1086,
        1106
      ],
      "op": "EXTCODESIZE",
      "path": "135"
    },
    "1474": {
      "fn": "Address.isContract",
      "offset": [
        1124,
        1132
      ],
      "op": "ISZERO",
      "path": "135",
      "statement": 12
    },
    "1475": {
      "fn": "Address.isContract",
      "offset": [
        1124,
        1132
      ],
      "op": "ISZERO",
      "path": "135"
    },
    "1476": {
      "fn": "Address.isContract",
      "offset": [
        1124,
        1132
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1477": {
      "fn": "Address.isContract",
      "jump": "o",
      "offset": [
        726,
        1139
      ],
      "op": "JUMP",
      "path": "135"
    },
    "1478": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7091,
        7816
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1479": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7206,
        7218
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x60"
    },
    "1481": {
      "branch": 18,
      "fn": "Address._verifyCallResult",
      "offset": [
        7234,
        7241
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1482": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7230,
        7810
      ],
      "op": "ISZERO",
      "path": "135"
    },
    "1483": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7230,
        7810
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x5D5"
    },
    "1486": {
      "branch": 18,
      "fn": "Address._verifyCallResult",
      "offset": [
        7230,
        7810
      ],
      "op": "JUMPI",
      "path": "135"
    },
    "1487": {
      "op": "POP"
    },
    "1488": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7264,
        7274
      ],
      "op": "DUP2",
      "path": "135",
      "statement": 13
    },
    "1489": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7257,
        7274
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x3FF"
    },
    "1492": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7257,
        7274
      ],
      "op": "JUMP",
      "path": "135"
    },
    "1493": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7230,
        7810
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1494": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7375,
        7392
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1495": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7375,
        7392
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1496": {
      "branch": 19,
      "fn": "Address._verifyCallResult",
      "offset": [
        7375,
        7396
      ],
      "op": "ISZERO",
      "path": "135"
    },
    "1497": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7371,
        7800
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x5E5"
    },
    "1500": {
      "branch": 19,
      "fn": "Address._verifyCallResult",
      "offset": [
        7371,
        7800
      ],
      "op": "JUMPI",
      "path": "135"
    },
    "1501": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7633,
        7643
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1502": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7627,
        7644
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1503": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7693,
        7708
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1504": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7680,
        7690
      ],
      "op": "DUP5",
      "path": "135"
    },
    "1505": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7676,
        7678
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1507": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7672,
        7691
      ],
      "op": "ADD",
      "path": "135"
    },
    "1508": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7665,
        7709
      ],
      "op": "REVERT",
      "path": "135"
    },
    "1509": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7582,
        7727
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1510": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7772,
        7784
      ],
      "op": "DUP2",
      "path": "135",
      "statement": 14
    },
    "1511": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1513": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1514": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1518": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1520": {
      "op": "SHL"
    },
    "1521": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1522": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1523": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x4"
    },
    "1525": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ADD",
      "path": "135"
    },
    "1526": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1527": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1528": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1530": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ADD",
      "path": "135"
    },
    "1531": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1532": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1533": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SUB",
      "path": "135"
    },
    "1534": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1535": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1536": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1537": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1538": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1539": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1540": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1541": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1542": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1544": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ADD",
      "path": "135"
    },
    "1545": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1546": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1547": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1548": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1549": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1550": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1552": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ADD",
      "path": "135"
    },
    "1553": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1554": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1555": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1556": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1557": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x0"
    },
    "1559": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1560": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1561": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1562": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "LT",
      "path": "135"
    },
    "1563": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ISZERO",
      "path": "135"
    },
    "1564": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x62F"
    },
    "1567": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "JUMPI",
      "path": "135"
    },
    "1568": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1569": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1570": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ADD",
      "path": "135"
    },
    "1571": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1572": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1573": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1574": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ADD",
      "path": "135"
    },
    "1575": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1576": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1578": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ADD",
      "path": "135"
    },
    "1579": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x617"
    },
    "1582": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "JUMP",
      "path": "135"
    },
    "1583": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1584": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1585": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1586": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1587": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1588": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1589": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1590": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1591": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1592": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ADD",
      "path": "135"
    },
    "1593": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1594": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x1F"
    },
    "1596": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "AND",
      "path": "135"
    },
    "1597": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1598": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ISZERO",
      "path": "135"
    },
    "1599": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x65C"
    },
    "1602": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "JUMPI",
      "path": "135"
    },
    "1603": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1604": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP3",
      "path": "135"
    },
    "1605": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SUB",
      "path": "135"
    },
    "1606": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1607": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1608": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x1"
    },
    "1610": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP4",
      "path": "135"
    },
    "1611": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1613": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SUB",
      "path": "135"
    },
    "1614": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH2",
      "path": "135",
      "value": "0x100"
    },
    "1617": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "EXP",
      "path": "135"
    },
    "1618": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SUB",
      "path": "135"
    },
    "1619": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "NOT",
      "path": "135"
    },
    "1620": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "AND",
      "path": "135"
    },
    "1621": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP2",
      "path": "135"
    },
    "1622": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MSTORE",
      "path": "135"
    },
    "1623": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x20"
    },
    "1625": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "ADD",
      "path": "135"
    },
    "1626": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1627": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1628": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "JUMPDEST",
      "path": "135"
    },
    "1629": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1630": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SWAP3",
      "path": "135"
    },
    "1631": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1632": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1633": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "POP",
      "path": "135"
    },
    "1634": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "PUSH1",
      "path": "135",
      "value": "0x40"
    },
    "1636": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "MLOAD",
      "path": "135"
    },
    "1637": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "DUP1",
      "path": "135"
    },
    "1638": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SWAP2",
      "path": "135"
    },
    "1639": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SUB",
      "path": "135"
    },
    "1640": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "SWAP1",
      "path": "135"
    },
    "1641": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7765,
        7785
      ],
      "op": "REVERT",
      "path": "135"
    }
  },
  "sha1": "768f99e68fd04114f3a239c23e85ce5889751bf5",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../proxy/Clones.sol\";\nimport \"../utils/Address.sol\";\n\ncontract ClonesMock {\n    using Address for address;\n    using Clones for address;\n\n    event NewInstance(address instance);\n\n    function clone(address master, bytes calldata initdata) public payable {\n        _initAndEmit(master.clone(), initdata);\n    }\n\n    function cloneDeterministic(address master, bytes32 salt, bytes calldata initdata) public payable {\n        _initAndEmit(master.cloneDeterministic(salt), initdata);\n    }\n\n    function predictDeterministicAddress(address master, bytes32 salt) public view returns (address predicted) {\n        return master.predictDeterministicAddress(salt);\n    }\n\n    function _initAndEmit(address instance, bytes memory initdata) private {\n        if (initdata.length > 0) {\n            instance.functionCallWithValue(initdata, msg.value);\n        }\n        emit NewInstance(instance);\n    }\n}\n",
  "sourceMap": "128:841:35:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ClonesMock.sol",
  "type": "contract"
}