{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "recRetval",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "recReverts",
          "type": "bool"
        },
        {
          "internalType": "bytes4",
          "name": "batRetval",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "batReverts",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "BatchReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "registerInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "114": "contracts/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/IERC1155Receiver.sol",
    "20": "contracts/openzeppelin-contracts@3.4.0/contracts/introspection/ERC165.sol",
    "23": "contracts/openzeppelin-contracts@3.4.0/contracts/introspection/IERC165.sol",
    "46": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ERC1155ReceiverMock.sol",
    "50": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ERC165Mock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ERC1155ReceiverMock.sol",
    "exportedSymbols": {
      "ERC1155ReceiverMock": [
        11356
      ]
    },
    "id": 11357,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11211,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:31:46"
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/IERC1155Receiver.sol",
        "file": "../token/ERC1155/IERC1155Receiver.sol",
        "id": 11212,
        "nodeType": "ImportDirective",
        "scope": 11357,
        "sourceUnit": 18413,
        "src": "66:47:46",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ERC165Mock.sol",
        "file": "./ERC165Mock.sol",
        "id": 11213,
        "nodeType": "ImportDirective",
        "scope": 11357,
        "sourceUnit": 11530,
        "src": "114:26:46",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 11214,
              "name": "IERC1155Receiver",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 18412,
              "src": "174:16:46",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1155Receiver_$18412",
                "typeString": "contract IERC1155Receiver"
              }
            },
            "id": 11215,
            "nodeType": "InheritanceSpecifier",
            "src": "174:16:46"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 11216,
              "name": "ERC165Mock",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 11529,
              "src": "192:10:46",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC165Mock_$11529",
                "typeString": "contract ERC165Mock"
              }
            },
            "id": 11217,
            "nodeType": "InheritanceSpecifier",
            "src": "192:10:46"
          }
        ],
        "contractDependencies": [
          9102,
          9404,
          11529,
          18412
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 11356,
        "linearizedBaseContracts": [
          11356,
          11529,
          9102,
          18412,
          9404
        ],
        "name": "ERC1155ReceiverMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 11219,
            "mutability": "mutable",
            "name": "_recRetval",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 11356,
            "src": "209:25:46",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 11218,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "209:6:46",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 11221,
            "mutability": "mutable",
            "name": "_recReverts",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 11356,
            "src": "240:24:46",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 11220,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "240:4:46",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 11223,
            "mutability": "mutable",
            "name": "_batRetval",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 11356,
            "src": "270:25:46",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 11222,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "270:6:46",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 11225,
            "mutability": "mutable",
            "name": "_batReverts",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 11356,
            "src": "301:24:46",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 11224,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "301:4:46",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 11239,
            "name": "Received",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 11238,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11227,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operator",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11239,
                  "src": "347:16:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11226,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "347:7:46",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11229,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11239,
                  "src": "365:12:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11228,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "365:7:46",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11231,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11239,
                  "src": "379:10:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11230,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "379:7:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11233,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11239,
                  "src": "391:13:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11232,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "391:7:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11235,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11239,
                  "src": "406:10:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11234,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "406:5:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11237,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "gas",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11239,
                  "src": "418:11:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11236,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "418:7:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "346:84:46"
            },
            "src": "332:99:46"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 11255,
            "name": "BatchReceived",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 11254,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11241,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operator",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11255,
                  "src": "456:16:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11240,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "456:7:46",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11243,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11255,
                  "src": "474:12:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11242,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "474:7:46",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11246,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "ids",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11255,
                  "src": "488:13:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 11244,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "488:7:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 11245,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "488:9:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11249,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "values",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11255,
                  "src": "503:16:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 11247,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "503:7:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 11248,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "503:9:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11251,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11255,
                  "src": "521:10:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11250,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "521:5:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11253,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "gas",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11255,
                  "src": "533:11:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11252,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "533:7:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "455:90:46"
            },
            "src": "436:110:46"
          },
          {
            "body": {
              "id": 11282,
              "nodeType": "Block",
              "src": "692:139:46",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11268,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 11266,
                      "name": "_recRetval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11219,
                      "src": "702:10:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 11267,
                      "name": "recRetval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11257,
                      "src": "715:9:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "src": "702:22:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "id": 11269,
                  "nodeType": "ExpressionStatement",
                  "src": "702:22:46"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11272,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 11270,
                      "name": "_recReverts",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11221,
                      "src": "734:11:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 11271,
                      "name": "recReverts",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11259,
                      "src": "748:10:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "734:24:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 11273,
                  "nodeType": "ExpressionStatement",
                  "src": "734:24:46"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11276,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 11274,
                      "name": "_batRetval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11223,
                      "src": "768:10:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 11275,
                      "name": "batRetval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11261,
                      "src": "781:9:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "src": "768:22:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "id": 11277,
                  "nodeType": "ExpressionStatement",
                  "src": "768:22:46"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11280,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 11278,
                      "name": "_batReverts",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11225,
                      "src": "800:11:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 11279,
                      "name": "batReverts",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11263,
                      "src": "814:10:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "800:24:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 11281,
                  "nodeType": "ExpressionStatement",
                  "src": "800:24:46"
                }
              ]
            },
            "documentation": null,
            "id": 11283,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 11264,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11257,
                  "mutability": "mutable",
                  "name": "recRetval",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11283,
                  "src": "574:16:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 11256,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "574:6:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11259,
                  "mutability": "mutable",
                  "name": "recReverts",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11283,
                  "src": "600:15:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 11258,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "600:4:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11261,
                  "mutability": "mutable",
                  "name": "batRetval",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11283,
                  "src": "625:16:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 11260,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "625:6:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11263,
                  "mutability": "mutable",
                  "name": "batReverts",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11283,
                  "src": "651:15:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 11262,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "651:4:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "564:108:46"
            },
            "returnParameters": {
              "id": 11265,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "692:0:46"
            },
            "scope": 11356,
            "src": "552:279:46",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              18393
            ],
            "body": {
              "id": 11317,
              "nodeType": "Block",
              "src": "1052:177:46",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 11301,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "1070:12:46",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 11300,
                          "name": "_recReverts",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11221,
                          "src": "1071:11:46",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552433131353552656365697665724d6f636b3a20726576657274696e67206f6e2072656365697665",
                        "id": 11302,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1084:43:46",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_28b84c4ed279ffb88476777a67b487aa734a98b71976220822fd64bc4c37ff03",
                          "typeString": "literal_string \"ERC1155ReceiverMock: reverting on receive\""
                        },
                        "value": "ERC1155ReceiverMock: reverting on receive"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_28b84c4ed279ffb88476777a67b487aa734a98b71976220822fd64bc4c37ff03",
                          "typeString": "literal_string \"ERC1155ReceiverMock: reverting on receive\""
                        }
                      ],
                      "id": 11299,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1062:7:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11303,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1062:66:46",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11304,
                  "nodeType": "ExpressionStatement",
                  "src": "1062:66:46"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 11306,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11285,
                        "src": "1152:8:46",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 11307,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11287,
                        "src": "1162:4:46",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 11308,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11289,
                        "src": "1168:2:46",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 11309,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11291,
                        "src": "1172:5:46",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 11310,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11293,
                        "src": "1179:4:46",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 11311,
                          "name": "gasleft",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -7,
                          "src": "1185:7:46",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 11312,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1185:9:46",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 11305,
                      "name": "Received",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11239,
                      "src": "1143:8:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256,uint256,bytes memory,uint256)"
                      }
                    },
                    "id": 11313,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1143:52:46",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11314,
                  "nodeType": "EmitStatement",
                  "src": "1138:57:46"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11315,
                    "name": "_recRetval",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 11219,
                    "src": "1212:10:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "functionReturnParameters": 11298,
                  "id": 11316,
                  "nodeType": "Return",
                  "src": "1205:17:46"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "f23a6e61",
            "id": 11318,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "onERC1155Received",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 11295,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1015:8:46"
            },
            "parameters": {
              "id": 11294,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11285,
                  "mutability": "mutable",
                  "name": "operator",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11318,
                  "src": "873:16:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11284,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "873:7:46",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11287,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11318,
                  "src": "899:12:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11286,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "899:7:46",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11289,
                  "mutability": "mutable",
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11318,
                  "src": "921:10:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11288,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "921:7:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11291,
                  "mutability": "mutable",
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11318,
                  "src": "941:13:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11290,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "941:7:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11293,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11318,
                  "src": "964:19:46",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11292,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "964:5:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "863:126:46"
            },
            "returnParameters": {
              "id": 11298,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11297,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11318,
                  "src": "1040:6:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 11296,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1040:6:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1039:8:46"
            },
            "scope": 11356,
            "src": "837:392:46",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              18411
            ],
            "body": {
              "id": 11354,
              "nodeType": "Block",
              "src": "1479:190:46",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 11338,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "1497:12:46",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 11337,
                          "name": "_batReverts",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11225,
                          "src": "1498:11:46",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552433131353552656365697665724d6f636b3a20726576657274696e67206f6e2062617463682072656365697665",
                        "id": 11339,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1511:49:46",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3e72644f1ec2e45850282bf7e40f58bed4cd632f58748543bbee2b7062f07e6f",
                          "typeString": "literal_string \"ERC1155ReceiverMock: reverting on batch receive\""
                        },
                        "value": "ERC1155ReceiverMock: reverting on batch receive"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3e72644f1ec2e45850282bf7e40f58bed4cd632f58748543bbee2b7062f07e6f",
                          "typeString": "literal_string \"ERC1155ReceiverMock: reverting on batch receive\""
                        }
                      ],
                      "id": 11336,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1489:7:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11340,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1489:72:46",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11341,
                  "nodeType": "ExpressionStatement",
                  "src": "1489:72:46"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 11343,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11320,
                        "src": "1590:8:46",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 11344,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11322,
                        "src": "1600:4:46",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 11345,
                        "name": "ids",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11325,
                        "src": "1606:3:46",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 11346,
                        "name": "values",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11328,
                        "src": "1611:6:46",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 11347,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11330,
                        "src": "1619:4:46",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 11348,
                          "name": "gasleft",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -7,
                          "src": "1625:7:46",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 11349,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1625:9:46",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 11342,
                      "name": "BatchReceived",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11255,
                      "src": "1576:13:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256[] memory,uint256[] memory,bytes memory,uint256)"
                      }
                    },
                    "id": 11350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1576:59:46",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11351,
                  "nodeType": "EmitStatement",
                  "src": "1571:64:46"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11352,
                    "name": "_batRetval",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 11223,
                    "src": "1652:10:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "functionReturnParameters": 11335,
                  "id": 11353,
                  "nodeType": "Return",
                  "src": "1645:17:46"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "bc197c81",
            "id": 11355,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "onERC1155BatchReceived",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 11332,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1442:8:46"
            },
            "parameters": {
              "id": 11331,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11320,
                  "mutability": "mutable",
                  "name": "operator",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11355,
                  "src": "1276:16:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11319,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1276:7:46",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11322,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11355,
                  "src": "1302:12:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11321,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1302:7:46",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11325,
                  "mutability": "mutable",
                  "name": "ids",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11355,
                  "src": "1324:22:46",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 11323,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1324:7:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 11324,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1324:9:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11328,
                  "mutability": "mutable",
                  "name": "values",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11355,
                  "src": "1356:25:46",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 11326,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1356:7:46",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 11327,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1356:9:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11330,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11355,
                  "src": "1391:19:46",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11329,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1391:5:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1266:150:46"
            },
            "returnParameters": {
              "id": 11335,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11334,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 11355,
                  "src": "1467:6:46",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 11333,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1467:6:46",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1466:8:46"
            },
            "scope": 11356,
            "src": "1235:434:46",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 11357,
        "src": "142:1529:46"
      }
    ],
    "src": "33:1639:46"
  },
  "bytecode": "608060405234801561001057600080fd5b5060405161076e38038061076e8339818101604052608081101561003357600080fd5b508051602082015160408301516060909301519192909161005a6301ffc9a760e01b6100c4565b6001805463ffffffff191660e095861c1760ff60201b1916640100000000941515949094029390931763ffffffff60281b1916650100000000009290941c919091029290921760ff60481b1916690100000000000000000092151592909202919091179055610148565b6001600160e01b03198082161415610123576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b610617806101576000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a714610051578063214cdb801461008c578063bc197c81146100b5578063f23a6e61146101f9575b600080fd5b6100786004803603602081101561006757600080fd5b50356001600160e01b03191661028c565b604080519115158252519081900360200190f35b6100b3600480360360208110156100a257600080fd5b50356001600160e01b0319166102ab565b005b6101dc600480360360a08110156100cb57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156100fe57600080fd5b82018360208201111561011057600080fd5b803590602001918460208302840111600160201b8311171561013157600080fd5b919390929091602081019035600160201b81111561014e57600080fd5b82018360208201111561016057600080fd5b803590602001918460208302840111600160201b8311171561018157600080fd5b919390929091602081019035600160201b81111561019e57600080fd5b8201836020820111156101b057600080fd5b803590602001918460018302840111600160201b831117156101d157600080fd5b5090925090506102b7565b604080516001600160e01b03199092168252519081900360200190f35b6101dc600480360360a081101561020f57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561024e57600080fd5b82018360208201111561026057600080fd5b803590602001918460018302840111600160201b8311171561028157600080fd5b50909250905061040e565b6001600160e01b03191660009081526020819052604090205460ff1690565b6102b481610505565b50565b6001546000906901000000000000000000900460ff16156103095760405162461bcd60e51b815260040180806020018281038252602f8152602001806105b3602f913960400191505060405180910390fd5b7f0bcad9224ba33b574e9c85298de2f44b4c80015a21aa5df474896444909863d889898989898989895a604051808a6001600160a01b03168152602001896001600160a01b0316815260200180602001806020018060200185815260200184810384528b8b82818152602001925060200280828437600083820152601f01601f19169091018581038452898152602090810191508a908a0280828437600083820152601f01601f191690910185810383528781526020019050878780828437600083820152604051601f909101601f19169092018290039e50909c50505050505050505050505050a15060015465010000000000900460e01b98975050505050505050565b600154600090600160201b900460ff161561045a5760405162461bcd60e51b815260040180806020018281038252602981526020018061058a6029913960400191505060405180910390fd5b7f20dfa9f79060c8c4d7fe892c97c71bcf6e3b63d1dcf66fea7aefc0211628cf298787878787875a60405180886001600160a01b03168152602001876001600160a01b03168152602001868152602001858152602001806020018381526020018281038252858582818152602001925080828437600083820152604051601f909101601f19169092018290039a509098505050505050505050a15060015460e01b9695505050505050565b6001600160e01b03198082161415610564576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff1916600117905556fe4552433131353552656365697665724d6f636b3a20726576657274696e67206f6e20726563656976654552433131353552656365697665724d6f636b3a20726576657274696e67206f6e2062617463682072656365697665a264697066735822122018dc6e3a2b087848297bce33a64b55ac5bab2abf7cb90338102b67ddd07c3b9264736f6c634300060c0033",
  "bytecodeSha1": "afd841a95d15315c50b8f48d8b851ed48fe113e9",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.12+commit.27d51765"
  },
  "contractName": "ERC1155ReceiverMock",
  "coverageMap": {
    "branches": {
      "114": {},
      "20": {
        "ERC165._registerInterface": {
          "12": [
            1590,
            1615,
            true
          ]
        }
      },
      "23": {},
      "46": {
        "ERC1155ReceiverMock.onERC1155BatchReceived": {
          "10": [
            1497,
            1509,
            true
          ]
        },
        "ERC1155ReceiverMock.onERC1155Received": {
          "11": [
            1070,
            1082,
            true
          ]
        }
      },
      "50": {}
    },
    "statements": {
      "114": {},
      "20": {
        "ERC165._registerInterface": {
          "8": [
            1582,
            1648
          ],
          "9": [
            1658,
            1698
          ]
        },
        "ERC165.supportsInterface": {
          "0": [
            1066,
            1106
          ]
        }
      },
      "23": {},
      "46": {
        "ERC1155ReceiverMock.onERC1155BatchReceived": {
          "2": [
            1489,
            1561
          ],
          "3": [
            1571,
            1635
          ],
          "4": [
            1645,
            1662
          ]
        },
        "ERC1155ReceiverMock.onERC1155Received": {
          "5": [
            1062,
            1128
          ],
          "6": [
            1138,
            1195
          ],
          "7": [
            1205,
            1222
          ]
        }
      },
      "50": {
        "ERC165Mock.registerInterface": {
          "1": [
            205,
            236
          ]
        }
      }
    }
  },
  "dependencies": [
    "ERC165",
    "ERC165Mock",
    "IERC1155Receiver",
    "IERC165"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a714610051578063214cdb801461008c578063bc197c81146100b5578063f23a6e61146101f9575b600080fd5b6100786004803603602081101561006757600080fd5b50356001600160e01b03191661028c565b604080519115158252519081900360200190f35b6100b3600480360360208110156100a257600080fd5b50356001600160e01b0319166102ab565b005b6101dc600480360360a08110156100cb57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156100fe57600080fd5b82018360208201111561011057600080fd5b803590602001918460208302840111600160201b8311171561013157600080fd5b919390929091602081019035600160201b81111561014e57600080fd5b82018360208201111561016057600080fd5b803590602001918460208302840111600160201b8311171561018157600080fd5b919390929091602081019035600160201b81111561019e57600080fd5b8201836020820111156101b057600080fd5b803590602001918460018302840111600160201b831117156101d157600080fd5b5090925090506102b7565b604080516001600160e01b03199092168252519081900360200190f35b6101dc600480360360a081101561020f57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561024e57600080fd5b82018360208201111561026057600080fd5b803590602001918460018302840111600160201b8311171561028157600080fd5b50909250905061040e565b6001600160e01b03191660009081526020819052604090205460ff1690565b6102b481610505565b50565b6001546000906901000000000000000000900460ff16156103095760405162461bcd60e51b815260040180806020018281038252602f8152602001806105b3602f913960400191505060405180910390fd5b7f0bcad9224ba33b574e9c85298de2f44b4c80015a21aa5df474896444909863d889898989898989895a604051808a6001600160a01b03168152602001896001600160a01b0316815260200180602001806020018060200185815260200184810384528b8b82818152602001925060200280828437600083820152601f01601f19169091018581038452898152602090810191508a908a0280828437600083820152601f01601f191690910185810383528781526020019050878780828437600083820152604051601f909101601f19169092018290039e50909c50505050505050505050505050a15060015465010000000000900460e01b98975050505050505050565b600154600090600160201b900460ff161561045a5760405162461bcd60e51b815260040180806020018281038252602981526020018061058a6029913960400191505060405180910390fd5b7f20dfa9f79060c8c4d7fe892c97c71bcf6e3b63d1dcf66fea7aefc0211628cf298787878787875a60405180886001600160a01b03168152602001876001600160a01b03168152602001868152602001858152602001806020018381526020018281038252858582818152602001925080828437600083820152604051601f909101601f19169092018290039a509098505050505050505050a15060015460e01b9695505050505050565b6001600160e01b03198082161415610564576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff1916600117905556fe4552433131353552656365697665724d6f636b3a20726576657274696e67206f6e20726563656976654552433131353552656365697665724d6f636b3a20726576657274696e67206f6e2062617463682072656365697665a264697066735822122018dc6e3a2b087848297bce33a64b55ac5bab2abf7cb90338102b67ddd07c3b9264736f6c634300060c0033",
  "deployedSourceMap": "142:1529:46:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;965:148:20;;;;;;;;;;;;;;;;-1:-1:-1;965:148:20;-1:-1:-1;;;;;;965:148:20;;:::i;:::-;;;;;;;;;;;;;;;;;;141:102:50;;;;;;;;;;;;;;;;-1:-1:-1;141:102:50;-1:-1:-1;;;;;;141:102:50;;:::i;:::-;;1235:434:46;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1235:434:46;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1235:434:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1235:434:46;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1235:434:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1235:434:46;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1235:434:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1235:434:46;;;;;;;;;;-1:-1:-1;1235:434:46;;-1:-1:-1;1235:434:46;-1:-1:-1;1235:434:46;:::i;:::-;;;;-1:-1:-1;;;;;;1235:434:46;;;;;;;;;;;;;;837:392;;;;;;;;;;;;;;;;-1:-1:-1;;;;;837:392:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;837:392:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;837:392:46;;;;;;;;;;-1:-1:-1;837:392:46;;-1:-1:-1;837:392:46;-1:-1:-1;837:392:46;:::i;965:148:20:-;-1:-1:-1;;;;;;1073:33:20;1050:4;1073:33;;;;;;;;;;;;;;965:148::o;141:102:50:-;205:31;224:11;205:18;:31::i;:::-;141:102;:::o;1235:434:46:-;1498:11;;1467:6;;1498:11;;;;;1497:12;1489:72;;;;-1:-1:-1;;;1489:72:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1576:59;1590:8;1600:4;1606:3;;1611:6;;1619:4;;1625:9;1576:59;;;;-1:-1:-1;;;;;1576:59:46;;;;;;-1:-1:-1;;;;;1576:59:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1576:59:46;;;;;;;;;;;;;;;;;-1:-1:-1;1576:59:46;;;;;;;;;;;;;;;-1:-1:-1;;1576:59:46;;;;;;;;;;;;;;;-1:-1:-1;1576:59:46;;;;;;;;;;;;;;;;;-1:-1:-1;;1576:59:46;;;;;;;;-1:-1:-1;1576:59:46;;-1:-1:-1;;;;;;;;;;;;;1576:59:46;-1:-1:-1;1652:10:46;;;;;;;1235:434;;;;;;;;;;:::o;837:392::-;1071:11;;1040:6;;-1:-1:-1;;;1071:11:46;;;;1070:12;1062:66;;;;-1:-1:-1;;;1062:66:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1143:52;1152:8;1162:4;1168:2;1172:5;1179:4;;1185:9;1143:52;;;;-1:-1:-1;;;;;1143:52:46;;;;;;-1:-1:-1;;;;;1143:52:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1143:52:46;;;;;;;;-1:-1:-1;1143:52:46;;-1:-1:-1;;;;;;;;;1143:52:46;-1:-1:-1;1212:10:46;;;;837:392;;;;;;;;:::o;1507:198:20:-;-1:-1:-1;;;;;;1590:25:20;;;;;1582:66;;;;;-1:-1:-1;;;1582:66:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1658:33:20;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1658:40:20;1694:4;1658:40;;;1507:198::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "id": "The ID of the token being transferred",
          "operator": "The address which initiated the transfer (i.e. msg.sender)",
          "value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "offset": [
    142,
    1671
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x214CDB80 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x1F9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x28C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xB3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x2AB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 PUSH1 0x20 DUP2 ADD SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x14E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 PUSH1 0x20 DUP2 ADD SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x1D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2B7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0xA0 DUP2 ADD PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x40E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2B4 DUP2 PUSH2 0x505 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH10 0x1000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x309 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5B3 PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xBCAD9224BA33B574E9C85298DE2F44B4C80015A21AA5DF474896444909863D8 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 GAS PUSH1 0x40 MLOAD DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 SUB DUP5 MSTORE DUP12 DUP12 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD DUP6 DUP2 SUB DUP5 MSTORE DUP10 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 POP DUP11 SWAP1 DUP11 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD DUP6 DUP2 SUB DUP4 MSTORE DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 POP DUP8 DUP8 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP3 ADD DUP3 SWAP1 SUB SWAP15 POP SWAP1 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP LOG1 POP PUSH1 0x1 SLOAD PUSH6 0x10000000000 SWAP1 DIV PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x45A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58A PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x20DFA9F79060C8C4D7FE892C97C71BCF6E3B63D1DCF66FEA7AEFC0211628CF29 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 GAS PUSH1 0x40 MLOAD DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP6 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP3 ADD DUP3 SWAP1 SUB SWAP11 POP SWAP1 SWAP9 POP POP POP POP POP POP POP POP POP LOG1 POP PUSH1 0x1 SLOAD PUSH1 0xE0 SHL SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x564 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433136353A20696E76616C696420696E7465726661636520696400000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP INVALID GASLIMIT MSTORE NUMBER BALANCE BALANCE CALLDATALOAD CALLDATALOAD MSTORE PUSH6 0x636569766572 0x4D PUSH16 0x636B3A20726576657274696E67206F6E KECCAK256 PUSH19 0x65636569766545524331313535526563656976 PUSH6 0x724D6F636B3A KECCAK256 PUSH19 0x6576657274696E67206F6E2062617463682072 PUSH6 0x6365697665A2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR 0xDC PUSH15 0x3A2B087848297BCE33A64B55AC5BAB 0x2A 0xBF PUSH29 0xB90338102B67DDD07C3B9264736F6C634300060C003300000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        142,
        1671
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "5": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "CALLVALUE",
      "path": "46"
    },
    "6": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "DUP1",
      "path": "46"
    },
    "7": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "8": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "12": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "DUP1",
      "path": "46"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "REVERT",
      "path": "46"
    },
    "16": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "17": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "POP",
      "path": "46"
    },
    "18": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "CALLDATASIZE",
      "path": "46"
    },
    "21": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "LT",
      "path": "46"
    },
    "22": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x4C"
    },
    "25": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "26": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "29": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "SHR",
      "path": "46"
    },
    "32": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "DUP1",
      "path": "46"
    },
    "33": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH4",
      "path": "46",
      "value": "0x1FFC9A7"
    },
    "38": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "EQ",
      "path": "46"
    },
    "39": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x51"
    },
    "42": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "43": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "DUP1",
      "path": "46"
    },
    "44": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH4",
      "path": "46",
      "value": "0x214CDB80"
    },
    "49": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "EQ",
      "path": "46"
    },
    "50": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x8C"
    },
    "53": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "54": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "DUP1",
      "path": "46"
    },
    "55": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH4",
      "path": "46",
      "value": "0xBC197C81"
    },
    "60": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "EQ",
      "path": "46"
    },
    "61": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0xB5"
    },
    "64": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "65": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "DUP1",
      "path": "46"
    },
    "66": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH4",
      "path": "46",
      "value": "0xF23A6E61"
    },
    "71": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "EQ",
      "path": "46"
    },
    "72": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x1F9"
    },
    "75": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "76": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "77": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "79": {
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "DUP1",
      "path": "46"
    },
    "80": {
      "first_revert": true,
      "fn": null,
      "offset": [
        142,
        1671
      ],
      "op": "REVERT",
      "path": "46"
    },
    "81": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "82": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x78"
    },
    "85": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "87": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "DUP1",
      "path": "20"
    },
    "88": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "89": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "SUB",
      "path": "20"
    },
    "90": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "92": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "DUP2",
      "path": "20"
    },
    "93": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "LT",
      "path": "20"
    },
    "94": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "95": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x67"
    },
    "98": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "99": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "101": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "DUP1",
      "path": "20"
    },
    "102": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "REVERT",
      "path": "20"
    },
    "103": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "104": {
      "op": "POP"
    },
    "105": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "CALLDATALOAD",
      "path": "20"
    },
    "106": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "108": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "110": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "112": {
      "op": "SHL"
    },
    "113": {
      "op": "SUB"
    },
    "114": {
      "op": "NOT"
    },
    "115": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "AND",
      "path": "20"
    },
    "116": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x28C"
    },
    "119": {
      "fn": "ERC165.supportsInterface",
      "jump": "i",
      "offset": [
        965,
        1113
      ],
      "op": "JUMP",
      "path": "20"
    },
    "120": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "121": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "123": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "DUP1",
      "path": "20"
    },
    "124": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "125": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "126": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "127": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "128": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "DUP3",
      "path": "20"
    },
    "129": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "130": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "131": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "132": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "DUP2",
      "path": "20"
    },
    "133": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "134": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "SUB",
      "path": "20"
    },
    "135": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "137": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "ADD",
      "path": "20"
    },
    "138": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "139": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "RETURN",
      "path": "20"
    },
    "140": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "JUMPDEST",
      "path": "50"
    },
    "141": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "PUSH2",
      "path": "50",
      "value": "0xB3"
    },
    "144": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "PUSH1",
      "path": "50",
      "value": "0x4"
    },
    "146": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "DUP1",
      "path": "50"
    },
    "147": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "CALLDATASIZE",
      "path": "50"
    },
    "148": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "SUB",
      "path": "50"
    },
    "149": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "PUSH1",
      "path": "50",
      "value": "0x20"
    },
    "151": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "DUP2",
      "path": "50"
    },
    "152": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "LT",
      "path": "50"
    },
    "153": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "ISZERO",
      "path": "50"
    },
    "154": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "PUSH2",
      "path": "50",
      "value": "0xA2"
    },
    "157": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "JUMPI",
      "path": "50"
    },
    "158": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "PUSH1",
      "path": "50",
      "value": "0x0"
    },
    "160": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "DUP1",
      "path": "50"
    },
    "161": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "REVERT",
      "path": "50"
    },
    "162": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "JUMPDEST",
      "path": "50"
    },
    "163": {
      "op": "POP"
    },
    "164": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "CALLDATALOAD",
      "path": "50"
    },
    "165": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "167": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "169": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "171": {
      "op": "SHL"
    },
    "172": {
      "op": "SUB"
    },
    "173": {
      "op": "NOT"
    },
    "174": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "AND",
      "path": "50"
    },
    "175": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "PUSH2",
      "path": "50",
      "value": "0x2AB"
    },
    "178": {
      "fn": "ERC165Mock.registerInterface",
      "jump": "i",
      "offset": [
        141,
        243
      ],
      "op": "JUMP",
      "path": "50"
    },
    "179": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "JUMPDEST",
      "path": "50"
    },
    "180": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "STOP",
      "path": "50"
    },
    "181": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "182": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x1DC"
    },
    "185": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x4"
    },
    "187": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "188": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "CALLDATASIZE",
      "path": "46"
    },
    "189": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SUB",
      "path": "46"
    },
    "190": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0xA0"
    },
    "192": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "193": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "LT",
      "path": "46"
    },
    "194": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "195": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0xCB"
    },
    "198": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "199": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "201": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "202": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "REVERT",
      "path": "46"
    },
    "203": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "204": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "206": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "208": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "210": {
      "op": "SHL"
    },
    "211": {
      "op": "SUB"
    },
    "212": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP3",
      "path": "46"
    },
    "213": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "214": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "215": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "AND",
      "path": "46"
    },
    "216": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "217": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "219": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "220": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "221": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "222": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "223": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "224": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "AND",
      "path": "46"
    },
    "225": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "226": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "227": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "228": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "229": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x60"
    },
    "231": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "232": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "233": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "235": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP3",
      "path": "46"
    },
    "236": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "237": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "238": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "240": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "242": {
      "op": "SHL"
    },
    "243": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "244": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "245": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "246": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0xFE"
    },
    "249": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "250": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "252": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "253": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "REVERT",
      "path": "46"
    },
    "254": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "255": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP3",
      "path": "46"
    },
    "256": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "257": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP4",
      "path": "46"
    },
    "258": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "260": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP3",
      "path": "46"
    },
    "261": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "262": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "263": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "264": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x110"
    },
    "267": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "268": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "270": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "271": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "REVERT",
      "path": "46"
    },
    "272": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "273": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "274": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "275": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "276": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "278": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "279": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "280": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP5",
      "path": "46"
    },
    "281": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "283": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP4",
      "path": "46"
    },
    "284": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "MUL",
      "path": "46"
    },
    "285": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP5",
      "path": "46"
    },
    "286": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "287": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "288": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "290": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "292": {
      "op": "SHL"
    },
    "293": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP4",
      "path": "46"
    },
    "294": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "295": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "OR",
      "path": "46"
    },
    "296": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "297": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x131"
    },
    "300": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "301": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "303": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "304": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "REVERT",
      "path": "46"
    },
    "305": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "306": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "307": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP4",
      "path": "46"
    },
    "308": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "309": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "310": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "311": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "312": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "314": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "315": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "316": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "317": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "318": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "320": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "322": {
      "op": "SHL"
    },
    "323": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "324": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "325": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "326": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x14E"
    },
    "329": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "330": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "332": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "333": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "REVERT",
      "path": "46"
    },
    "334": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "335": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP3",
      "path": "46"
    },
    "336": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "337": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP4",
      "path": "46"
    },
    "338": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "340": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP3",
      "path": "46"
    },
    "341": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "342": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "343": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "344": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x160"
    },
    "347": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "348": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "350": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "351": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "REVERT",
      "path": "46"
    },
    "352": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "353": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "354": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "355": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "356": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "358": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "359": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "360": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP5",
      "path": "46"
    },
    "361": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "363": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP4",
      "path": "46"
    },
    "364": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "MUL",
      "path": "46"
    },
    "365": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP5",
      "path": "46"
    },
    "366": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "367": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "370": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "372": {
      "op": "SHL"
    },
    "373": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP4",
      "path": "46"
    },
    "374": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "375": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "OR",
      "path": "46"
    },
    "376": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "377": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x181"
    },
    "380": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "381": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "383": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "384": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "REVERT",
      "path": "46"
    },
    "385": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "386": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "387": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP4",
      "path": "46"
    },
    "388": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "389": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "390": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "391": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "392": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "394": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "395": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "396": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "397": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "398": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "400": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "402": {
      "op": "SHL"
    },
    "403": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "404": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "405": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "406": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x19E"
    },
    "409": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "410": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "412": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "413": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "REVERT",
      "path": "46"
    },
    "414": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "415": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP3",
      "path": "46"
    },
    "416": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "417": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP4",
      "path": "46"
    },
    "418": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "420": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP3",
      "path": "46"
    },
    "421": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "422": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "423": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "424": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x1B0"
    },
    "427": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "428": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "430": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "431": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "REVERT",
      "path": "46"
    },
    "432": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "433": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "434": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "435": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "436": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "438": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "439": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "440": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP5",
      "path": "46"
    },
    "441": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x1"
    },
    "443": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP4",
      "path": "46"
    },
    "444": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "MUL",
      "path": "46"
    },
    "445": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP5",
      "path": "46"
    },
    "446": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "447": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "448": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "450": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "452": {
      "op": "SHL"
    },
    "453": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP4",
      "path": "46"
    },
    "454": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "GT",
      "path": "46"
    },
    "455": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "OR",
      "path": "46"
    },
    "456": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "457": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x1D1"
    },
    "460": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "461": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "463": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "464": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "REVERT",
      "path": "46"
    },
    "465": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "466": {
      "op": "POP"
    },
    "467": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "468": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "469": {
      "op": "POP"
    },
    "470": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "471": {
      "op": "POP"
    },
    "472": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x2B7"
    },
    "475": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "jump": "i",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMP",
      "path": "46"
    },
    "476": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "477": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "479": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP1",
      "path": "46"
    },
    "480": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "481": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "483": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "485": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "487": {
      "op": "SHL"
    },
    "488": {
      "op": "SUB"
    },
    "489": {
      "op": "NOT"
    },
    "490": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "491": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "492": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "AND",
      "path": "46"
    },
    "493": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP3",
      "path": "46"
    },
    "494": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "495": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "496": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "497": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "DUP2",
      "path": "46"
    },
    "498": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "499": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SUB",
      "path": "46"
    },
    "500": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "502": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "ADD",
      "path": "46"
    },
    "503": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "504": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "RETURN",
      "path": "46"
    },
    "505": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "506": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x1DC"
    },
    "509": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x4"
    },
    "511": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP1",
      "path": "46"
    },
    "512": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "CALLDATASIZE",
      "path": "46"
    },
    "513": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SUB",
      "path": "46"
    },
    "514": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0xA0"
    },
    "516": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP2",
      "path": "46"
    },
    "517": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "LT",
      "path": "46"
    },
    "518": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "519": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x20F"
    },
    "522": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "523": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "525": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP1",
      "path": "46"
    },
    "526": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "REVERT",
      "path": "46"
    },
    "527": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "528": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "530": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "532": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "534": {
      "op": "SHL"
    },
    "535": {
      "op": "SUB"
    },
    "536": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP3",
      "path": "46"
    },
    "537": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "538": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP2",
      "path": "46"
    },
    "539": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "AND",
      "path": "46"
    },
    "540": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "541": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "543": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP2",
      "path": "46"
    },
    "544": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ADD",
      "path": "46"
    },
    "545": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "546": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "547": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "548": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "AND",
      "path": "46"
    },
    "549": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "550": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "552": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP3",
      "path": "46"
    },
    "553": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ADD",
      "path": "46"
    },
    "554": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "555": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "556": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x60"
    },
    "558": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP2",
      "path": "46"
    },
    "559": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ADD",
      "path": "46"
    },
    "560": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "561": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "562": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP2",
      "path": "46"
    },
    "563": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ADD",
      "path": "46"
    },
    "564": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "565": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0xA0"
    },
    "567": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP2",
      "path": "46"
    },
    "568": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ADD",
      "path": "46"
    },
    "569": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x80"
    },
    "571": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP3",
      "path": "46"
    },
    "572": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ADD",
      "path": "46"
    },
    "573": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "574": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "576": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "578": {
      "op": "SHL"
    },
    "579": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP2",
      "path": "46"
    },
    "580": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "GT",
      "path": "46"
    },
    "581": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "582": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x24E"
    },
    "585": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "586": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "588": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP1",
      "path": "46"
    },
    "589": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "REVERT",
      "path": "46"
    },
    "590": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "591": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP3",
      "path": "46"
    },
    "592": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ADD",
      "path": "46"
    },
    "593": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP4",
      "path": "46"
    },
    "594": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "596": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP3",
      "path": "46"
    },
    "597": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ADD",
      "path": "46"
    },
    "598": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "GT",
      "path": "46"
    },
    "599": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "600": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x260"
    },
    "603": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "604": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "606": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP1",
      "path": "46"
    },
    "607": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "REVERT",
      "path": "46"
    },
    "608": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "609": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP1",
      "path": "46"
    },
    "610": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "CALLDATALOAD",
      "path": "46"
    },
    "611": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "612": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "614": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ADD",
      "path": "46"
    },
    "615": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "616": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP5",
      "path": "46"
    },
    "617": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x1"
    },
    "619": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP4",
      "path": "46"
    },
    "620": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "MUL",
      "path": "46"
    },
    "621": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP5",
      "path": "46"
    },
    "622": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ADD",
      "path": "46"
    },
    "623": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "GT",
      "path": "46"
    },
    "624": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "626": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "628": {
      "op": "SHL"
    },
    "629": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP4",
      "path": "46"
    },
    "630": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "GT",
      "path": "46"
    },
    "631": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "OR",
      "path": "46"
    },
    "632": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "633": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x281"
    },
    "636": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "637": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "639": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "DUP1",
      "path": "46"
    },
    "640": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "REVERT",
      "path": "46"
    },
    "641": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "642": {
      "op": "POP"
    },
    "643": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "644": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "645": {
      "op": "POP"
    },
    "646": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "647": {
      "op": "POP"
    },
    "648": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x40E"
    },
    "651": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "jump": "i",
      "offset": [
        837,
        1229
      ],
      "op": "JUMP",
      "path": "46"
    },
    "652": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        965,
        1113
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "653": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "655": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "657": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "659": {
      "op": "SHL"
    },
    "660": {
      "op": "SUB"
    },
    "661": {
      "op": "NOT"
    },
    "662": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "AND",
      "path": "20",
      "statement": 0
    },
    "663": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1050,
        1054
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "665": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "666": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "DUP2",
      "path": "20"
    },
    "667": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "668": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "670": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "DUP2",
      "path": "20"
    },
    "671": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "672": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "673": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "675": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "676": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "677": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "678": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xFF"
    },
    "680": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "AND",
      "path": "20"
    },
    "681": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1073,
        1106
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "682": {
      "fn": "ERC165.supportsInterface",
      "jump": "o",
      "offset": [
        965,
        1113
      ],
      "op": "JUMP",
      "path": "20"
    },
    "683": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "JUMPDEST",
      "path": "50"
    },
    "684": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        205,
        236
      ],
      "op": "PUSH2",
      "path": "50",
      "statement": 1,
      "value": "0x2B4"
    },
    "687": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        224,
        235
      ],
      "op": "DUP2",
      "path": "50"
    },
    "688": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        205,
        223
      ],
      "op": "PUSH2",
      "path": "50",
      "value": "0x505"
    },
    "691": {
      "fn": "ERC165Mock.registerInterface",
      "jump": "i",
      "offset": [
        205,
        236
      ],
      "op": "JUMP",
      "path": "50"
    },
    "692": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        205,
        236
      ],
      "op": "JUMPDEST",
      "path": "50"
    },
    "693": {
      "fn": "ERC165Mock.registerInterface",
      "offset": [
        141,
        243
      ],
      "op": "POP",
      "path": "50"
    },
    "694": {
      "fn": "ERC165Mock.registerInterface",
      "jump": "o",
      "offset": [
        141,
        243
      ],
      "op": "JUMP",
      "path": "50"
    },
    "695": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "696": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1498,
        1509
      ],
      "op": "PUSH1",
      "path": "46",
      "statement": 2,
      "value": "0x1"
    },
    "698": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1498,
        1509
      ],
      "op": "SLOAD",
      "path": "46"
    },
    "699": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1467,
        1473
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "701": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1467,
        1473
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "702": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1498,
        1509
      ],
      "op": "PUSH10",
      "path": "46",
      "value": "0x1000000000000000000"
    },
    "713": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1498,
        1509
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "714": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1498,
        1509
      ],
      "op": "DIV",
      "path": "46"
    },
    "715": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1498,
        1509
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0xFF"
    },
    "717": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1498,
        1509
      ],
      "op": "AND",
      "path": "46"
    },
    "718": {
      "branch": 10,
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1497,
        1509
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "719": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x309"
    },
    "722": {
      "branch": 10,
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "723": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "725": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "726": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "730": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "732": {
      "op": "SHL"
    },
    "733": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "DUP2",
      "path": "46"
    },
    "734": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "735": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x4"
    },
    "737": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "ADD",
      "path": "46"
    },
    "738": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "DUP1",
      "path": "46"
    },
    "739": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "DUP1",
      "path": "46"
    },
    "740": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "742": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "ADD",
      "path": "46"
    },
    "743": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "DUP3",
      "path": "46"
    },
    "744": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "DUP2",
      "path": "46"
    },
    "745": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "SUB",
      "path": "46"
    },
    "746": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "DUP3",
      "path": "46"
    },
    "747": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "748": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x2F"
    },
    "750": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "DUP2",
      "path": "46"
    },
    "751": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "752": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "754": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "ADD",
      "path": "46"
    },
    "755": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "DUP1",
      "path": "46"
    },
    "756": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x5B3"
    },
    "759": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x2F"
    },
    "761": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "762": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "CODECOPY",
      "path": "46"
    },
    "763": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "765": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "ADD",
      "path": "46"
    },
    "766": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "767": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "POP",
      "path": "46"
    },
    "768": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "POP",
      "path": "46"
    },
    "769": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "771": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "772": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "DUP1",
      "path": "46"
    },
    "773": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "774": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "SUB",
      "path": "46"
    },
    "775": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "776": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "REVERT",
      "path": "46"
    },
    "777": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1489,
        1561
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "778": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH32",
      "path": "46",
      "statement": 3,
      "value": "0xBCAD9224BA33B574E9C85298DE2F44B4C80015A21AA5DF474896444909863D8"
    },
    "811": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1590,
        1598
      ],
      "op": "DUP10",
      "path": "46"
    },
    "812": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1600,
        1604
      ],
      "op": "DUP10",
      "path": "46"
    },
    "813": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1606,
        1609
      ],
      "op": "DUP10",
      "path": "46"
    },
    "814": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1606,
        1609
      ],
      "op": "DUP10",
      "path": "46"
    },
    "815": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1611,
        1617
      ],
      "op": "DUP10",
      "path": "46"
    },
    "816": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1611,
        1617
      ],
      "op": "DUP10",
      "path": "46"
    },
    "817": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1619,
        1623
      ],
      "op": "DUP10",
      "path": "46"
    },
    "818": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1619,
        1623
      ],
      "op": "DUP10",
      "path": "46"
    },
    "819": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1625,
        1634
      ],
      "op": "GAS",
      "path": "46"
    },
    "820": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "822": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "823": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP1",
      "path": "46"
    },
    "824": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP11",
      "path": "46"
    },
    "825": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "827": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "829": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "831": {
      "op": "SHL"
    },
    "832": {
      "op": "SUB"
    },
    "833": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "AND",
      "path": "46"
    },
    "834": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "835": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "836": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "838": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "839": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP10",
      "path": "46"
    },
    "840": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "842": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "844": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "846": {
      "op": "SHL"
    },
    "847": {
      "op": "SUB"
    },
    "848": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "AND",
      "path": "46"
    },
    "849": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "850": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "851": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "853": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "854": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP1",
      "path": "46"
    },
    "855": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "857": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "858": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP1",
      "path": "46"
    },
    "859": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "861": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "862": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP1",
      "path": "46"
    },
    "863": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "865": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "866": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP6",
      "path": "46"
    },
    "867": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "868": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "869": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "871": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "872": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP5",
      "path": "46"
    },
    "873": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "874": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SUB",
      "path": "46"
    },
    "875": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP5",
      "path": "46"
    },
    "876": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "877": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP12",
      "path": "46"
    },
    "878": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP12",
      "path": "46"
    },
    "879": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP3",
      "path": "46"
    },
    "880": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "881": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "882": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "883": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "885": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "886": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "887": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "POP",
      "path": "46"
    },
    "888": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "890": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MUL",
      "path": "46"
    },
    "891": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP1",
      "path": "46"
    },
    "892": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP3",
      "path": "46"
    },
    "893": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP5",
      "path": "46"
    },
    "894": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "CALLDATACOPY",
      "path": "46"
    },
    "895": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "897": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP4",
      "path": "46"
    },
    "898": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP3",
      "path": "46"
    },
    "899": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "900": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "901": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x1F"
    },
    "903": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "904": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "906": {
      "op": "NOT"
    },
    "907": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "AND",
      "path": "46"
    },
    "908": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "909": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "910": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "911": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP6",
      "path": "46"
    },
    "912": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "913": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SUB",
      "path": "46"
    },
    "914": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP5",
      "path": "46"
    },
    "915": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "916": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP10",
      "path": "46"
    },
    "917": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "918": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "919": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "921": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "922": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "923": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "924": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "925": {
      "op": "POP"
    },
    "926": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP11",
      "path": "46"
    },
    "927": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "928": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP11",
      "path": "46"
    },
    "929": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MUL",
      "path": "46"
    },
    "930": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP1",
      "path": "46"
    },
    "931": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP3",
      "path": "46"
    },
    "932": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP5",
      "path": "46"
    },
    "933": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "CALLDATACOPY",
      "path": "46"
    },
    "934": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "936": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP4",
      "path": "46"
    },
    "937": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP3",
      "path": "46"
    },
    "938": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "939": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "940": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x1F"
    },
    "942": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "943": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "945": {
      "op": "NOT"
    },
    "946": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "AND",
      "path": "46"
    },
    "947": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "948": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "949": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "950": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP6",
      "path": "46"
    },
    "951": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "952": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SUB",
      "path": "46"
    },
    "953": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP4",
      "path": "46"
    },
    "954": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "955": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP8",
      "path": "46"
    },
    "956": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP2",
      "path": "46"
    },
    "957": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "958": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "960": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "961": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "962": {
      "op": "POP"
    },
    "963": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP8",
      "path": "46"
    },
    "964": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP8",
      "path": "46"
    },
    "965": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP1",
      "path": "46"
    },
    "966": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP3",
      "path": "46"
    },
    "967": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP5",
      "path": "46"
    },
    "968": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "CALLDATACOPY",
      "path": "46"
    },
    "969": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "971": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP4",
      "path": "46"
    },
    "972": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP3",
      "path": "46"
    },
    "973": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "974": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "975": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "977": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "978": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x1F"
    },
    "980": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "981": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "982": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "983": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "985": {
      "op": "NOT"
    },
    "986": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "AND",
      "path": "46"
    },
    "987": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "988": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "989": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "ADD",
      "path": "46"
    },
    "990": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "DUP3",
      "path": "46"
    },
    "991": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "992": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SUB",
      "path": "46"
    },
    "993": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP15",
      "path": "46"
    },
    "994": {
      "op": "POP"
    },
    "995": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "996": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "SWAP13",
      "path": "46"
    },
    "997": {
      "op": "POP"
    },
    "998": {
      "op": "POP"
    },
    "999": {
      "op": "POP"
    },
    "1000": {
      "op": "POP"
    },
    "1001": {
      "op": "POP"
    },
    "1002": {
      "op": "POP"
    },
    "1003": {
      "op": "POP"
    },
    "1004": {
      "op": "POP"
    },
    "1005": {
      "op": "POP"
    },
    "1006": {
      "op": "POP"
    },
    "1007": {
      "op": "POP"
    },
    "1008": {
      "op": "POP"
    },
    "1009": {
      "op": "POP"
    },
    "1010": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1576,
        1635
      ],
      "op": "LOG1",
      "path": "46"
    },
    "1011": {
      "op": "POP"
    },
    "1012": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1652,
        1662
      ],
      "op": "PUSH1",
      "path": "46",
      "statement": 4,
      "value": "0x1"
    },
    "1014": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1652,
        1662
      ],
      "op": "SLOAD",
      "path": "46"
    },
    "1015": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1652,
        1662
      ],
      "op": "PUSH6",
      "path": "46",
      "value": "0x10000000000"
    },
    "1022": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1652,
        1662
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "1023": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1652,
        1662
      ],
      "op": "DIV",
      "path": "46"
    },
    "1024": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1652,
        1662
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0xE0"
    },
    "1026": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1652,
        1662
      ],
      "op": "SHL",
      "path": "46"
    },
    "1027": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP9",
      "path": "46"
    },
    "1028": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "SWAP8",
      "path": "46"
    },
    "1029": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "POP",
      "path": "46"
    },
    "1030": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "POP",
      "path": "46"
    },
    "1031": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "POP",
      "path": "46"
    },
    "1032": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "POP",
      "path": "46"
    },
    "1033": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "POP",
      "path": "46"
    },
    "1034": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "POP",
      "path": "46"
    },
    "1035": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "POP",
      "path": "46"
    },
    "1036": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "offset": [
        1235,
        1669
      ],
      "op": "POP",
      "path": "46"
    },
    "1037": {
      "fn": "ERC1155ReceiverMock.onERC1155BatchReceived",
      "jump": "o",
      "offset": [
        1235,
        1669
      ],
      "op": "JUMP",
      "path": "46"
    },
    "1038": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "1039": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1071,
        1082
      ],
      "op": "PUSH1",
      "path": "46",
      "statement": 5,
      "value": "0x1"
    },
    "1041": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1071,
        1082
      ],
      "op": "SLOAD",
      "path": "46"
    },
    "1042": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1040,
        1046
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "1044": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1040,
        1046
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "1045": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1049": {
      "op": "SHL"
    },
    "1050": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1071,
        1082
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "1051": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1071,
        1082
      ],
      "op": "DIV",
      "path": "46"
    },
    "1052": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1071,
        1082
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0xFF"
    },
    "1054": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1071,
        1082
      ],
      "op": "AND",
      "path": "46"
    },
    "1055": {
      "branch": 11,
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1070,
        1082
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "1056": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x45A"
    },
    "1059": {
      "branch": 11,
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "1060": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "1062": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "1063": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1067": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1069": {
      "op": "SHL"
    },
    "1070": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1071": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1072": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x4"
    },
    "1074": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "ADD",
      "path": "46"
    },
    "1075": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "DUP1",
      "path": "46"
    },
    "1076": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "DUP1",
      "path": "46"
    },
    "1077": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "1079": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "ADD",
      "path": "46"
    },
    "1080": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "DUP3",
      "path": "46"
    },
    "1081": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1082": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "SUB",
      "path": "46"
    },
    "1083": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "DUP3",
      "path": "46"
    },
    "1084": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1085": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x29"
    },
    "1087": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1088": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1089": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "1091": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "ADD",
      "path": "46"
    },
    "1092": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "DUP1",
      "path": "46"
    },
    "1093": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x58A"
    },
    "1096": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x29"
    },
    "1098": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "1099": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "CODECOPY",
      "path": "46"
    },
    "1100": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "1102": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "ADD",
      "path": "46"
    },
    "1103": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "1104": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "POP",
      "path": "46"
    },
    "1105": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "POP",
      "path": "46"
    },
    "1106": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "1108": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "1109": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "DUP1",
      "path": "46"
    },
    "1110": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "1111": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "SUB",
      "path": "46"
    },
    "1112": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "1113": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "REVERT",
      "path": "46"
    },
    "1114": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1062,
        1128
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "1115": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH32",
      "path": "46",
      "statement": 6,
      "value": "0x20DFA9F79060C8C4D7FE892C97C71BCF6E3B63D1DCF66FEA7AEFC0211628CF29"
    },
    "1148": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1152,
        1160
      ],
      "op": "DUP8",
      "path": "46"
    },
    "1149": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1162,
        1166
      ],
      "op": "DUP8",
      "path": "46"
    },
    "1150": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1168,
        1170
      ],
      "op": "DUP8",
      "path": "46"
    },
    "1151": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1172,
        1177
      ],
      "op": "DUP8",
      "path": "46"
    },
    "1152": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1179,
        1183
      ],
      "op": "DUP8",
      "path": "46"
    },
    "1153": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1179,
        1183
      ],
      "op": "DUP8",
      "path": "46"
    },
    "1154": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1185,
        1194
      ],
      "op": "GAS",
      "path": "46"
    },
    "1155": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "1157": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "1158": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP1",
      "path": "46"
    },
    "1159": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP9",
      "path": "46"
    },
    "1160": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1162": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1164": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1166": {
      "op": "SHL"
    },
    "1167": {
      "op": "SUB"
    },
    "1168": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "AND",
      "path": "46"
    },
    "1169": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1170": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1171": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "1173": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "ADD",
      "path": "46"
    },
    "1174": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP8",
      "path": "46"
    },
    "1175": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1177": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1179": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1181": {
      "op": "SHL"
    },
    "1182": {
      "op": "SUB"
    },
    "1183": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "AND",
      "path": "46"
    },
    "1184": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1185": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1186": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "1188": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "ADD",
      "path": "46"
    },
    "1189": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP7",
      "path": "46"
    },
    "1190": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1191": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1192": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "1194": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "ADD",
      "path": "46"
    },
    "1195": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP6",
      "path": "46"
    },
    "1196": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1197": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1198": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "1200": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "ADD",
      "path": "46"
    },
    "1201": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP1",
      "path": "46"
    },
    "1202": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "1204": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "ADD",
      "path": "46"
    },
    "1205": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP4",
      "path": "46"
    },
    "1206": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1207": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1208": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "1210": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "ADD",
      "path": "46"
    },
    "1211": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP3",
      "path": "46"
    },
    "1212": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1213": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SUB",
      "path": "46"
    },
    "1214": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP3",
      "path": "46"
    },
    "1215": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1216": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP6",
      "path": "46"
    },
    "1217": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP6",
      "path": "46"
    },
    "1218": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP3",
      "path": "46"
    },
    "1219": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1220": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP2",
      "path": "46"
    },
    "1221": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1222": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x20"
    },
    "1224": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "ADD",
      "path": "46"
    },
    "1225": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "1226": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "POP",
      "path": "46"
    },
    "1227": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP1",
      "path": "46"
    },
    "1228": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP3",
      "path": "46"
    },
    "1229": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP5",
      "path": "46"
    },
    "1230": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "CALLDATACOPY",
      "path": "46"
    },
    "1231": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "1233": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP4",
      "path": "46"
    },
    "1234": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP3",
      "path": "46"
    },
    "1235": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "ADD",
      "path": "46"
    },
    "1236": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "MSTORE",
      "path": "46"
    },
    "1237": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "1239": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "1240": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x1F"
    },
    "1242": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "1243": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "1244": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "ADD",
      "path": "46"
    },
    "1245": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1247": {
      "op": "NOT"
    },
    "1248": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "AND",
      "path": "46"
    },
    "1249": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "1250": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SWAP3",
      "path": "46"
    },
    "1251": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "ADD",
      "path": "46"
    },
    "1252": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "DUP3",
      "path": "46"
    },
    "1253": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "1254": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SUB",
      "path": "46"
    },
    "1255": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SWAP11",
      "path": "46"
    },
    "1256": {
      "op": "POP"
    },
    "1257": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "1258": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "SWAP9",
      "path": "46"
    },
    "1259": {
      "op": "POP"
    },
    "1260": {
      "op": "POP"
    },
    "1261": {
      "op": "POP"
    },
    "1262": {
      "op": "POP"
    },
    "1263": {
      "op": "POP"
    },
    "1264": {
      "op": "POP"
    },
    "1265": {
      "op": "POP"
    },
    "1266": {
      "op": "POP"
    },
    "1267": {
      "op": "POP"
    },
    "1268": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1143,
        1195
      ],
      "op": "LOG1",
      "path": "46"
    },
    "1269": {
      "op": "POP"
    },
    "1270": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1212,
        1222
      ],
      "op": "PUSH1",
      "path": "46",
      "statement": 7,
      "value": "0x1"
    },
    "1272": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1212,
        1222
      ],
      "op": "SLOAD",
      "path": "46"
    },
    "1273": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1212,
        1222
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0xE0"
    },
    "1275": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        1212,
        1222
      ],
      "op": "SHL",
      "path": "46"
    },
    "1276": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP7",
      "path": "46"
    },
    "1277": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "SWAP6",
      "path": "46"
    },
    "1278": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "POP",
      "path": "46"
    },
    "1279": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "POP",
      "path": "46"
    },
    "1280": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "POP",
      "path": "46"
    },
    "1281": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "POP",
      "path": "46"
    },
    "1282": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "POP",
      "path": "46"
    },
    "1283": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "offset": [
        837,
        1229
      ],
      "op": "POP",
      "path": "46"
    },
    "1284": {
      "fn": "ERC1155ReceiverMock.onERC1155Received",
      "jump": "o",
      "offset": [
        837,
        1229
      ],
      "op": "JUMP",
      "path": "46"
    },
    "1285": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1507,
        1705
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1286": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1288": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1290": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1292": {
      "op": "SHL"
    },
    "1293": {
      "op": "SUB"
    },
    "1294": {
      "op": "NOT"
    },
    "1295": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1590,
        1615
      ],
      "op": "DUP1",
      "path": "20",
      "statement": 8
    },
    "1296": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1590,
        1615
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1297": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1590,
        1615
      ],
      "op": "AND",
      "path": "20"
    },
    "1298": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1590,
        1615
      ],
      "op": "EQ",
      "path": "20"
    },
    "1299": {
      "branch": 12,
      "fn": "ERC165._registerInterface",
      "offset": [
        1590,
        1615
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "1300": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x564"
    },
    "1303": {
      "branch": 12,
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1304": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1306": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1307": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1308": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1312": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1314": {
      "op": "SHL"
    },
    "1315": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1316": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1317": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "1319": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "1321": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1322": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "ADD",
      "path": "20"
    },
    "1323": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1324": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1C"
    },
    "1326": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x24"
    },
    "1328": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1329": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "ADD",
      "path": "20"
    },
    "1330": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1331": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "PUSH32",
      "path": "20",
      "value": "0x4552433136353A20696E76616C696420696E7465726661636520696400000000"
    },
    "1364": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x44"
    },
    "1366": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1367": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "ADD",
      "path": "20"
    },
    "1368": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1369": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1370": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1371": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1372": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1373": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1374": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "SUB",
      "path": "20"
    },
    "1375": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x64"
    },
    "1377": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "ADD",
      "path": "20"
    },
    "1378": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1379": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "REVERT",
      "path": "20"
    },
    "1380": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1582,
        1648
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1381": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1383": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1385": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1387": {
      "op": "SHL"
    },
    "1388": {
      "op": "SUB"
    },
    "1389": {
      "op": "NOT"
    },
    "1390": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "AND",
      "path": "20",
      "statement": 9
    },
    "1391": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1678
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1393": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1394": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1395": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1396": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "1398": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1399": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1400": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1401": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1403": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1404": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1691
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "1405": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1698
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1406": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1698
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1407": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1409": {
      "op": "NOT"
    },
    "1410": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1698
      ],
      "op": "AND",
      "path": "20"
    },
    "1411": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1694,
        1698
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "1413": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1698
      ],
      "op": "OR",
      "path": "20"
    },
    "1414": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1698
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1415": {
      "fn": "ERC165._registerInterface",
      "offset": [
        1658,
        1698
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1416": {
      "fn": "ERC165._registerInterface",
      "jump": "o",
      "offset": [
        1507,
        1705
      ],
      "op": "JUMP",
      "path": "20"
    }
  },
  "sha1": "70b19b19d50bba357eeba13f635455d64bc0c8ed",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\nimport \"./ERC165Mock.sol\";\n\ncontract ERC1155ReceiverMock is IERC1155Receiver, ERC165Mock {\n    bytes4 private _recRetval;\n    bool private _recReverts;\n    bytes4 private _batRetval;\n    bool private _batReverts;\n\n    event Received(address operator, address from, uint256 id, uint256 value, bytes data, uint256 gas);\n    event BatchReceived(address operator, address from, uint256[] ids, uint256[] values, bytes data, uint256 gas);\n\n    constructor (\n        bytes4 recRetval,\n        bool recReverts,\n        bytes4 batRetval,\n        bool batReverts\n    )\n        public\n    {\n        _recRetval = recRetval;\n        _recReverts = recReverts;\n        _batRetval = batRetval;\n        _batReverts = batReverts;\n    }\n\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        override\n        returns(bytes4)\n    {\n        require(!_recReverts, \"ERC1155ReceiverMock: reverting on receive\");\n        emit Received(operator, from, id, value, data, gasleft());\n        return _recRetval;\n    }\n\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        override\n        returns(bytes4)\n    {\n        require(!_batReverts, \"ERC1155ReceiverMock: reverting on batch receive\");\n        emit BatchReceived(operator, from, ids, values, data, gasleft());\n        return _batRetval;\n    }\n}\n",
  "sourceMap": "142:1529:46:-:0;;;552:279;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;552:279:46;;;;;;;;;;;;;;;;;;;768:40:20;-1:-1:-1;;;768:18:20;:40::i;:::-;702:10:46;:22;;-1:-1:-1;;702:22:46;;;;;;-1:-1:-1;;;;734:24:46;;;;;;;;;;;;;-1:-1:-1;;;;768:22:46;;;;;;;;;;;;;;-1:-1:-1;;;;800:24:46;;;;;;;;;;;;;;;142:1529;;1507:198:20;-1:-1:-1;;;;;;1590:25:20;;;;;1582:66;;;;;-1:-1:-1;;;1582:66:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1658:33:20;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1658:40:20;1694:4;1658:40;;;1507:198::o;142:1529:46:-;;;;;;;",
  "sourcePath": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ERC1155ReceiverMock.sol",
  "type": "contract"
}