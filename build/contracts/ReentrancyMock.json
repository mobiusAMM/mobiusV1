{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "callback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ReentrancyAttack",
          "name": "attacker",
          "type": "address"
        }
      ],
      "name": "countAndCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "countLocalRecursive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "countThisRecursive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "137": "contracts/openzeppelin-contracts@3.4.0/contracts/utils/Context.sol",
    "143": "contracts/openzeppelin-contracts@3.4.0/contracts/utils/ReentrancyGuard.sol",
    "79": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ReentrancyAttack.sol",
    "80": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ReentrancyMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ReentrancyMock.sol",
    "exportedSymbols": {
      "ReentrancyMock": [
        13761
      ]
    },
    "id": 13762,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 13644,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:31:80"
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts@3.4.0/contracts/utils/ReentrancyGuard.sol",
        "file": "../utils/ReentrancyGuard.sol",
        "id": 13645,
        "nodeType": "ImportDirective",
        "scope": 13762,
        "sourceUnit": 24088,
        "src": "66:38:80",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ReentrancyAttack.sol",
        "file": "./ReentrancyAttack.sol",
        "id": 13646,
        "nodeType": "ImportDirective",
        "scope": 13762,
        "sourceUnit": 13643,
        "src": "105:32:80",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 13647,
              "name": "ReentrancyGuard",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 24087,
              "src": "166:15:80",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ReentrancyGuard_$24087",
                "typeString": "contract ReentrancyGuard"
              }
            },
            "id": 13648,
            "nodeType": "InheritanceSpecifier",
            "src": "166:15:80"
          }
        ],
        "contractDependencies": [
          24087
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 13761,
        "linearizedBaseContracts": [
          13761,
          24087
        ],
        "name": "ReentrancyMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "61bc221a",
            "id": 13650,
            "mutability": "mutable",
            "name": "counter",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 13761,
            "src": "188:22:80",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 13649,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "188:7:80",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13657,
              "nodeType": "Block",
              "src": "239:28:80",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13655,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 13653,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13650,
                      "src": "249:7:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 13654,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "259:1:80",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "249:11:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 13656,
                  "nodeType": "ExpressionStatement",
                  "src": "249:11:80"
                }
              ]
            },
            "documentation": null,
            "id": 13658,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 13651,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "229:2:80"
            },
            "returnParameters": {
              "id": 13652,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "239:0:80"
            },
            "scope": 13761,
            "src": "217:50:80",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13666,
              "nodeType": "Block",
              "src": "315:25:80",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 13663,
                      "name": "_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13760,
                      "src": "325:6:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 13664,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "325:8:80",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13665,
                  "nodeType": "ExpressionStatement",
                  "src": "325:8:80"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "083b2732",
            "id": 13667,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 13661,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 13660,
                  "name": "nonReentrant",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 24086,
                  "src": "302:12:80",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "302:12:80"
              }
            ],
            "name": "callback",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 13659,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "290:2:80"
            },
            "returnParameters": {
              "id": 13662,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "315:0:80"
            },
            "scope": 13761,
            "src": "273:67:80",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 13688,
              "nodeType": "Block",
              "src": "406:100:80",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 13676,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 13674,
                      "name": "n",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13669,
                      "src": "420:1:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 13675,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "424:1:80",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "420:5:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 13687,
                  "nodeType": "IfStatement",
                  "src": "416:84:80",
                  "trueBody": {
                    "id": 13686,
                    "nodeType": "Block",
                    "src": "427:73:80",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 13677,
                            "name": "_count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13760,
                            "src": "441:6:80",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 13678,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "441:8:80",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 13679,
                        "nodeType": "ExpressionStatement",
                        "src": "441:8:80"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 13683,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 13681,
                                "name": "n",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 13669,
                                "src": "483:1:80",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 13682,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "487:1:80",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "483:5:80",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 13680,
                            "name": "countLocalRecursive",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13689,
                            "src": "463:19:80",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 13684,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "463:26:80",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 13685,
                        "nodeType": "ExpressionStatement",
                        "src": "463:26:80"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "functionSelector": "96ffa690",
            "id": 13689,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 13672,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 13671,
                  "name": "nonReentrant",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 24086,
                  "src": "393:12:80",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "393:12:80"
              }
            ],
            "name": "countLocalRecursive",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 13670,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13669,
                  "mutability": "mutable",
                  "name": "n",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 13689,
                  "src": "375:9:80",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13668,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "375:7:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "374:11:80"
            },
            "returnParameters": {
              "id": 13673,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "406:0:80"
            },
            "scope": 13761,
            "src": "346:160:80",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13725,
              "nodeType": "Block",
              "src": "571:297:80",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 13698,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 13696,
                      "name": "n",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13691,
                      "src": "585:1:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 13697,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "589:1:80",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "585:5:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 13724,
                  "nodeType": "IfStatement",
                  "src": "581:281:80",
                  "trueBody": {
                    "id": 13723,
                    "nodeType": "Block",
                    "src": "592:270:80",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 13699,
                            "name": "_count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13760,
                            "src": "606:6:80",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 13700,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "606:8:80",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 13701,
                        "nodeType": "ExpressionStatement",
                        "src": "606:8:80"
                      },
                      {
                        "assignments": [
                          13703,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 13703,
                            "mutability": "mutable",
                            "name": "success",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 13723,
                            "src": "692:12:80",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 13702,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "692:4:80",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 13717,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "636f756e74546869735265637572736976652875696e7432353629",
                                  "id": 13711,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "752:29:80",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_8c5344fa6b010fdd5e2cff6c41f85eb27e8b457f2d042f418209d56095018878",
                                    "typeString": "literal_string \"countThisRecursive(uint256)\""
                                  },
                                  "value": "countThisRecursive(uint256)"
                                },
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 13714,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 13712,
                                    "name": "n",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 13691,
                                    "src": "783:1:80",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "31",
                                    "id": 13713,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "787:1:80",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "783:5:80",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_8c5344fa6b010fdd5e2cff6c41f85eb27e8b457f2d042f418209d56095018878",
                                    "typeString": "literal_string \"countThisRecursive(uint256)\""
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 13709,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "728:3:80",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 13710,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSignature",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "728:23:80",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (string memory) pure returns (bytes memory)"
                                }
                              },
                              "id": 13715,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "728:61:80",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 13706,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "717:4:80",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ReentrancyMock_$13761",
                                    "typeString": "contract ReentrancyMock"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ReentrancyMock_$13761",
                                    "typeString": "contract ReentrancyMock"
                                  }
                                ],
                                "id": 13705,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "709:7:80",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 13704,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "709:7:80",
                                  "typeDescriptions": {
                                    "typeIdentifier": null,
                                    "typeString": null
                                  }
                                }
                              },
                              "id": 13707,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "709:13:80",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 13708,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "709:18:80",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 13716,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "709:81:80",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "691:99:80"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 13719,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13703,
                              "src": "812:7:80",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "5265656e7472616e63794d6f636b3a206661696c65642063616c6c",
                              "id": 13720,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "821:29:80",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6e7df6a41596369ff81d71c1a274a01b76010e7a5848023b008a2b13b15462a6",
                                "typeString": "literal_string \"ReentrancyMock: failed call\""
                              },
                              "value": "ReentrancyMock: failed call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6e7df6a41596369ff81d71c1a274a01b76010e7a5848023b008a2b13b15462a6",
                                "typeString": "literal_string \"ReentrancyMock: failed call\""
                              }
                            ],
                            "id": 13718,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "804:7:80",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 13721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "804:47:80",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 13722,
                        "nodeType": "ExpressionStatement",
                        "src": "804:47:80"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "functionSelector": "8c5344fa",
            "id": 13726,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 13694,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 13693,
                  "name": "nonReentrant",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 24086,
                  "src": "558:12:80",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "558:12:80"
              }
            ],
            "name": "countThisRecursive",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 13692,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13691,
                  "mutability": "mutable",
                  "name": "n",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 13726,
                  "src": "540:9:80",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13690,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "540:7:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "539:11:80"
            },
            "returnParameters": {
              "id": 13695,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "571:0:80"
            },
            "scope": 13761,
            "src": "512:356:80",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13751,
              "nodeType": "Block",
              "src": "943:115:80",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 13733,
                      "name": "_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13760,
                      "src": "953:6:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 13734,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "953:8:80",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13735,
                  "nodeType": "ExpressionStatement",
                  "src": "953:8:80"
                },
                {
                  "assignments": [
                    13737
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 13737,
                      "mutability": "mutable",
                      "name": "func",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 13751,
                      "src": "971:11:80",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "typeName": {
                        "id": 13736,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "971:6:80",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 13744,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "63616c6c6261636b2829",
                            "id": 13741,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1002:12:80",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402",
                              "typeString": "literal_string \"callback()\""
                            },
                            "value": "callback()"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402",
                              "typeString": "literal_string \"callback()\""
                            }
                          ],
                          "id": 13740,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -8,
                          "src": "992:9:80",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 13742,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "992:23:80",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 13739,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "985:6:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes4_$",
                        "typeString": "type(bytes4)"
                      },
                      "typeName": {
                        "id": 13738,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "985:6:80",
                        "typeDescriptions": {
                          "typeIdentifier": null,
                          "typeString": null
                        }
                      }
                    },
                    "id": 13743,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "985:31:80",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "971:45:80"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 13748,
                        "name": "func",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13737,
                        "src": "1046:4:80",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 13745,
                        "name": "attacker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13728,
                        "src": "1026:8:80",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ReentrancyAttack_$13642",
                          "typeString": "contract ReentrancyAttack"
                        }
                      },
                      "id": 13747,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "callSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 13641,
                      "src": "1026:19:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bytes4_$returns$__$",
                        "typeString": "function (bytes4) external"
                      }
                    },
                    "id": 13749,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1026:25:80",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13750,
                  "nodeType": "ExpressionStatement",
                  "src": "1026:25:80"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "b672ad8b",
            "id": 13752,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 13731,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 13730,
                  "name": "nonReentrant",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 24086,
                  "src": "930:12:80",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "930:12:80"
              }
            ],
            "name": "countAndCall",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 13729,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13728,
                  "mutability": "mutable",
                  "name": "attacker",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 13752,
                  "src": "896:25:80",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ReentrancyAttack_$13642",
                    "typeString": "contract ReentrancyAttack"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 13727,
                    "name": "ReentrancyAttack",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 13642,
                    "src": "896:16:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ReentrancyAttack_$13642",
                      "typeString": "contract ReentrancyAttack"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "895:27:80"
            },
            "returnParameters": {
              "id": 13732,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "943:0:80"
            },
            "scope": 13761,
            "src": "874:184:80",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13759,
              "nodeType": "Block",
              "src": "1090:29:80",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13757,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 13755,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13650,
                      "src": "1100:7:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 13756,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1111:1:80",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1100:12:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 13758,
                  "nodeType": "ExpressionStatement",
                  "src": "1100:12:80"
                }
              ]
            },
            "documentation": null,
            "id": 13760,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_count",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 13753,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1079:2:80"
            },
            "returnParameters": {
              "id": 13754,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1090:0:80"
            },
            "scope": 13761,
            "src": "1064:55:80",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "scope": 13762,
        "src": "139:982:80"
      }
    ],
    "src": "33:1089:80"
  },
  "bytecode": "608060405234801561001057600080fd5b50600160008181559055610478806100296000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063083b27321461005c57806361bc221a146100665780638c5344fa1461008057806396ffa6901461009d578063b672ad8b146100ba575b600080fd5b6100646100e0565b005b61006e61013a565b60408051918252519081900360200190f35b6100646004803603602081101561009657600080fd5b5035610140565b610064600480360360208110156100b357600080fd5b50356102ce565b610064600480360360208110156100d057600080fd5b50356001600160a01b0316610333565b60026000541415610126576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b6002600055610133610418565b6001600055565b60015481565b60026000541415610186576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b600260005580156102c657610199610418565b60408051600019830160248083019190915282518083039091018152604490910182526020810180516001600160e01b0316634629a27d60e11b17815291518151600093309392918291908083835b602083106102075780518252601f1990920191602091820191016101e8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610269576040519150601f19603f3d011682016040523d82523d6000602084013e61026e565b606091505b50509050806102c4576040805162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c0000000000604482015290519081900360640190fd5b505b506001600055565b60026000541415610314576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b600260005580156102c657610327610418565b6102c6600182036102ce565b60026000541415610379576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b6002600055610386610418565b60408051630a2df1ed60e01b815263041d939960e11b600482015290517f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402916001600160a01b03841691630a2df1ed9160248082019260009290919082900301818387803b1580156103f757600080fd5b505af115801561040b573d6000803e3d6000fd5b5050600160005550505050565b600180548101905556fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00a264697066735822122096bc2453cae314977f54951a85d985d47c45365c779597a2aa0321ef3406ea2264736f6c634300060c0033",
  "bytecodeSha1": "3a79d84987d69043b8b2808503361d2c1ad1a811",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.12+commit.27d51765"
  },
  "contractName": "ReentrancyMock",
  "coverageMap": {
    "branches": {
      "137": {},
      "143": {
        "ReentrancyMock.countAndCall": {
          "11": [
            2277,
            2296,
            true
          ]
        }
      },
      "79": {},
      "80": {
        "ReentrancyMock.countLocalRecursive": {
          "10": [
            420,
            425,
            false
          ]
        },
        "ReentrancyMock.countThisRecursive": {
          "8": [
            585,
            590,
            false
          ],
          "9": [
            812,
            819,
            true
          ]
        }
      }
    },
    "statements": {
      "137": {},
      "143": {},
      "79": {},
      "80": {
        "ReentrancyMock._count": {
          "7": [
            1100,
            1112
          ]
        },
        "ReentrancyMock.callback": {
          "0": [
            325,
            333
          ]
        },
        "ReentrancyMock.countAndCall": {
          "5": [
            953,
            961
          ],
          "6": [
            1026,
            1051
          ]
        },
        "ReentrancyMock.countLocalRecursive": {
          "3": [
            441,
            449
          ],
          "4": [
            463,
            489
          ]
        },
        "ReentrancyMock.countThisRecursive": {
          "1": [
            606,
            614
          ],
          "2": [
            804,
            851
          ]
        }
      }
    }
  },
  "dependencies": [
    "Context",
    "ReentrancyAttack",
    "ReentrancyGuard"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c8063083b27321461005c57806361bc221a146100665780638c5344fa1461008057806396ffa6901461009d578063b672ad8b146100ba575b600080fd5b6100646100e0565b005b61006e61013a565b60408051918252519081900360200190f35b6100646004803603602081101561009657600080fd5b5035610140565b610064600480360360208110156100b357600080fd5b50356102ce565b610064600480360360208110156100d057600080fd5b50356001600160a01b0316610333565b60026000541415610126576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b6002600055610133610418565b6001600055565b60015481565b60026000541415610186576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b600260005580156102c657610199610418565b60408051600019830160248083019190915282518083039091018152604490910182526020810180516001600160e01b0316634629a27d60e11b17815291518151600093309392918291908083835b602083106102075780518252601f1990920191602091820191016101e8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610269576040519150601f19603f3d011682016040523d82523d6000602084013e61026e565b606091505b50509050806102c4576040805162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c0000000000604482015290519081900360640190fd5b505b506001600055565b60026000541415610314576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b600260005580156102c657610327610418565b6102c6600182036102ce565b60026000541415610379576040805162461bcd60e51b815260206004820152601f6024820152600080516020610423833981519152604482015290519081900360640190fd5b6002600055610386610418565b60408051630a2df1ed60e01b815263041d939960e11b600482015290517f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402916001600160a01b03841691630a2df1ed9160248082019260009290919082900301818387803b1580156103f757600080fd5b505af115801561040b573d6000803e3d6000fd5b5050600160005550505050565b600180548101905556fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00a264697066735822122096bc2453cae314977f54951a85d985d47c45365c779597a2aa0321ef3406ea2264736f6c634300060c0033",
  "deployedSourceMap": "139:982:80:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;273:67;;;:::i;:::-;;188:22;;;:::i;:::-;;;;;;;;;;;;;;;;512:356;;;;;;;;;;;;;;;;-1:-1:-1;512:356:80;;:::i;346:160::-;;;;;;;;;;;;;;;;-1:-1:-1;346:160:80;;:::i;874:184::-;;;;;;;;;;;;;;;;-1:-1:-1;874:184:80;-1:-1:-1;;;;;874:184:80;;:::i;273:67::-;1688:1:143;2277:7;;:19;;2269:63;;;;;-1:-1:-1;;;2269:63:143;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2269:63:143;;;;;;;;;;;;;;;1688:1;2407:7;:18;325:8:80::1;:6;:8::i;:::-;1645:1:143::0;2580:7;:22;273:67:80:o;188:22::-;;;;:::o;512:356::-;1688:1:143;2277:7;;:19;;2269:63;;;;;-1:-1:-1;;;2269:63:143;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2269:63:143;;;;;;;;;;;;;;;1688:1;2407:7;:18;585:5:80;;581:281:::1;;606:8;:6;:8::i;:::-;728:61;::::0;;-1:-1:-1;;783:5:80;;728:61:::1;::::0;;::::1;::::0;;;;;;;;;;;;;;;;;;;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;728:61:80::1;-1:-1:-1::0;;;728:61:80::1;::::0;;709:81;;;;692:12:::1;::::0;717:4:::1;::::0;728:61;709:81;;;728:61;709:81;;728:61;709:81:::1;;;;;;::::0;;;;-1:-1:-1;;709:81:80;;;;::::1;::::0;;::::1;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;691:99;;;812:7;804:47;;;::::0;;-1:-1:-1;;;804:47:80;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;581:281;;-1:-1:-1::0;1645:1:143;2580:7;:22;512:356:80:o;346:160::-;1688:1:143;2277:7;;:19;;2269:63;;;;;-1:-1:-1;;;2269:63:143;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2269:63:143;;;;;;;;;;;;;;;1688:1;2407:7;:18;420:5:80;;416:84:::1;;441:8;:6;:8::i;:::-;463:26;487:1;483;:5;463:19;:26::i;874:184::-:0;1688:1:143;2277:7;;:19;;2269:63;;;;;-1:-1:-1;;;2269:63:143;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2269:63:143;;;;;;;;;;;;;;;1688:1;2407:7;:18;953:8:80::1;:6;:8::i;:::-;1026:25;::::0;;-1:-1:-1;;;1026:25:80;;-1:-1:-1;;;1026:25:80::1;::::0;::::1;::::0;;;992:23:::1;::::0;-1:-1:-1;;;;;1026:19:80;::::1;::::0;::::1;::::0;:25;;;;;971:11:::1;::::0;1026:25;;;;;;;;971:11;1026:19;:25;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;1645:1:143;2580:7;:22;-1:-1:-1;;;;874:184:80:o;1064:55::-;1111:1;1100:12;;;;;;1064:55::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    139,
    1121
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x83B2732 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x61BC221A EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8C5344FA EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x96FFA690 EQ PUSH2 0x9D JUMPI DUP1 PUSH4 0xB672AD8B EQ PUSH2 0xBA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0xE0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6E PUSH2 0x13A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x64 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x140 JUMP JUMPDEST PUSH2 0x64 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x2CE JUMP JUMPDEST PUSH2 0x64 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x333 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x126 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x423 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x133 PUSH2 0x418 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x186 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x423 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH2 0x199 PUSH2 0x418 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 NOT DUP4 ADD PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x4629A27D PUSH1 0xE1 SHL OR DUP2 MSTORE SWAP2 MLOAD DUP2 MLOAD PUSH1 0x0 SWAP4 ADDRESS SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x207 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x269 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x26E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2C4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E63794D6F636B3A206661696C65642063616C6C0000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x314 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x423 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH2 0x327 PUSH2 0x418 JUMP JUMPDEST PUSH2 0x2C6 PUSH1 0x1 DUP3 SUB PUSH2 0x2CE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x379 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x423 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x386 PUSH2 0x418 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xA2DF1ED PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x41D9399 PUSH1 0xE1 SHL PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH32 0x83B2732F78169BFAAD6B407FA338CC97D697ED69D3915A18239CC111D51A402 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0xA2DF1ED SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x40B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD DUP2 ADD SWAP1 SSTORE JUMP INVALID MSTORE PUSH6 0x656E7472616E PUSH4 0x79477561 PUSH19 0x643A207265656E7472616E742063616C6C00A2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xBC 0x24 MSTORE8 0xCA 0xE3 EQ SWAP8 PUSH32 0x54951A85D985D47C45365C779597A2AA0321EF3406EA2264736F6C634300060C STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        139,
        1121
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "5": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "CALLVALUE",
      "path": "80"
    },
    "6": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "DUP1",
      "path": "80"
    },
    "7": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "8": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "12": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "DUP1",
      "path": "80"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "REVERT",
      "path": "80"
    },
    "16": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "17": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "POP",
      "path": "80"
    },
    "18": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "CALLDATASIZE",
      "path": "80"
    },
    "21": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "LT",
      "path": "80"
    },
    "22": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "26": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "CALLDATALOAD",
      "path": "80"
    },
    "29": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "SHR",
      "path": "80"
    },
    "32": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "DUP1",
      "path": "80"
    },
    "33": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH4",
      "path": "80",
      "value": "0x83B2732"
    },
    "38": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "EQ",
      "path": "80"
    },
    "39": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "43": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "DUP1",
      "path": "80"
    },
    "44": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH4",
      "path": "80",
      "value": "0x61BC221A"
    },
    "49": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "EQ",
      "path": "80"
    },
    "50": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x66"
    },
    "53": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "54": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "DUP1",
      "path": "80"
    },
    "55": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH4",
      "path": "80",
      "value": "0x8C5344FA"
    },
    "60": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "EQ",
      "path": "80"
    },
    "61": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x80"
    },
    "64": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "65": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "DUP1",
      "path": "80"
    },
    "66": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH4",
      "path": "80",
      "value": "0x96FFA690"
    },
    "71": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "EQ",
      "path": "80"
    },
    "72": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x9D"
    },
    "75": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "76": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "DUP1",
      "path": "80"
    },
    "77": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH4",
      "path": "80",
      "value": "0xB672AD8B"
    },
    "82": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "EQ",
      "path": "80"
    },
    "83": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0xBA"
    },
    "86": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "87": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "88": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "DUP1",
      "path": "80"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        139,
        1121
      ],
      "op": "REVERT",
      "path": "80"
    },
    "92": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        273,
        340
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "93": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        273,
        340
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x64"
    },
    "96": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        273,
        340
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0xE0"
    },
    "99": {
      "fn": "ReentrancyMock.callback",
      "jump": "i",
      "offset": [
        273,
        340
      ],
      "op": "JUMP",
      "path": "80"
    },
    "100": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        273,
        340
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "101": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        273,
        340
      ],
      "op": "STOP",
      "path": "80"
    },
    "102": {
      "offset": [
        188,
        210
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "103": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x6E"
    },
    "106": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x13A"
    },
    "109": {
      "fn": "ReentrancyMock.callback",
      "jump": "i",
      "offset": [
        188,
        210
      ],
      "op": "JUMP",
      "path": "80"
    },
    "110": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "111": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "113": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "DUP1",
      "path": "80"
    },
    "114": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "115": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "116": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "DUP3",
      "path": "80"
    },
    "117": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "118": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "119": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "120": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "DUP2",
      "path": "80"
    },
    "121": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "122": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "SUB",
      "path": "80"
    },
    "123": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x20"
    },
    "125": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "ADD",
      "path": "80"
    },
    "126": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "127": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "RETURN",
      "path": "80"
    },
    "128": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "129": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x64"
    },
    "132": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x4"
    },
    "134": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "DUP1",
      "path": "80"
    },
    "135": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "CALLDATASIZE",
      "path": "80"
    },
    "136": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "SUB",
      "path": "80"
    },
    "137": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x20"
    },
    "139": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "DUP2",
      "path": "80"
    },
    "140": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "LT",
      "path": "80"
    },
    "141": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "142": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x96"
    },
    "145": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "146": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "148": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "DUP1",
      "path": "80"
    },
    "149": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "REVERT",
      "path": "80"
    },
    "150": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "151": {
      "op": "POP"
    },
    "152": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "CALLDATALOAD",
      "path": "80"
    },
    "153": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x140"
    },
    "156": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        512,
        868
      ],
      "op": "JUMP",
      "path": "80"
    },
    "157": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "158": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x64"
    },
    "161": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x4"
    },
    "163": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "DUP1",
      "path": "80"
    },
    "164": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "CALLDATASIZE",
      "path": "80"
    },
    "165": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "SUB",
      "path": "80"
    },
    "166": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x20"
    },
    "168": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "DUP2",
      "path": "80"
    },
    "169": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "LT",
      "path": "80"
    },
    "170": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "171": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0xB3"
    },
    "174": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "175": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "177": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "DUP1",
      "path": "80"
    },
    "178": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "REVERT",
      "path": "80"
    },
    "179": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "180": {
      "op": "POP"
    },
    "181": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "CALLDATALOAD",
      "path": "80"
    },
    "182": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x2CE"
    },
    "185": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        346,
        506
      ],
      "op": "JUMP",
      "path": "80"
    },
    "186": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "187": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x64"
    },
    "190": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x4"
    },
    "192": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "DUP1",
      "path": "80"
    },
    "193": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "CALLDATASIZE",
      "path": "80"
    },
    "194": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "SUB",
      "path": "80"
    },
    "195": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x20"
    },
    "197": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "DUP2",
      "path": "80"
    },
    "198": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "LT",
      "path": "80"
    },
    "199": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "200": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0xD0"
    },
    "203": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "204": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "206": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "DUP1",
      "path": "80"
    },
    "207": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "REVERT",
      "path": "80"
    },
    "208": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "209": {
      "op": "POP"
    },
    "210": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "CALLDATALOAD",
      "path": "80"
    },
    "211": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "213": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "215": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "217": {
      "op": "SHL"
    },
    "218": {
      "op": "SUB"
    },
    "219": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "AND",
      "path": "80"
    },
    "220": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x333"
    },
    "223": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "i",
      "offset": [
        874,
        1058
      ],
      "op": "JUMP",
      "path": "80"
    },
    "224": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        273,
        340
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "225": {
      "offset": [
        1688,
        1689
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x2"
    },
    "227": {
      "offset": [
        2277,
        2284
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "229": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2277,
        2284
      ],
      "op": "SLOAD",
      "path": "143"
    },
    "230": {
      "offset": [
        2277,
        2296
      ],
      "op": "EQ",
      "path": "143"
    },
    "231": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2277,
        2296
      ],
      "op": "ISZERO",
      "path": "143"
    },
    "232": {
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH2",
      "path": "143",
      "value": "0x126"
    },
    "235": {
      "offset": [
        2269,
        2332
      ],
      "op": "JUMPI",
      "path": "143"
    },
    "236": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x40"
    },
    "238": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP1",
      "path": "143"
    },
    "239": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "MLOAD",
      "path": "143"
    },
    "240": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "244": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "246": {
      "op": "SHL"
    },
    "247": {
      "offset": [
        2269,
        2332
      ],
      "op": "DUP2",
      "path": "143"
    },
    "248": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "249": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x20"
    },
    "251": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x4"
    },
    "253": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "254": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "255": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "256": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x1F"
    },
    "258": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x24"
    },
    "260": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "261": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "262": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "263": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "265": {
      "op": "DUP1"
    },
    "266": {
      "op": "MLOAD"
    },
    "267": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "269": {
      "op": "PUSH2",
      "value": "0x423"
    },
    "272": {
      "op": "DUP4"
    },
    "273": {
      "op": "CODECOPY"
    },
    "274": {
      "op": "DUP2"
    },
    "275": {
      "op": "MLOAD"
    },
    "276": {
      "op": "SWAP2"
    },
    "277": {
      "op": "MSTORE"
    },
    "278": {
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x44"
    },
    "280": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "281": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "282": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "283": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "284": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "MLOAD",
      "path": "143"
    },
    "285": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "286": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP2",
      "path": "143"
    },
    "287": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "288": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "SUB",
      "path": "143"
    },
    "289": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x64"
    },
    "291": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "292": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "293": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "REVERT",
      "path": "143"
    },
    "294": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2269,
        2332
      ],
      "op": "JUMPDEST",
      "path": "143"
    },
    "295": {
      "offset": [
        1688,
        1689
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x2"
    },
    "297": {
      "offset": [
        2407,
        2414
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "299": {
      "offset": [
        2407,
        2425
      ],
      "op": "SSTORE",
      "path": "143"
    },
    "300": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        325,
        333
      ],
      "op": "PUSH2",
      "path": "80",
      "statement": 0,
      "value": "0x133"
    },
    "303": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        325,
        331
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x418"
    },
    "306": {
      "fn": "ReentrancyMock.callback",
      "jump": "i",
      "offset": [
        325,
        333
      ],
      "op": "JUMP",
      "path": "80"
    },
    "307": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        325,
        333
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "308": {
      "offset": [
        1645,
        1646
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x1"
    },
    "310": {
      "offset": [
        2580,
        2587
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "312": {
      "offset": [
        2580,
        2602
      ],
      "op": "SSTORE",
      "path": "143"
    },
    "313": {
      "fn": "ReentrancyMock.callback",
      "jump": "o",
      "offset": [
        273,
        340
      ],
      "op": "JUMP",
      "path": "80"
    },
    "314": {
      "offset": [
        188,
        210
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "315": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x1"
    },
    "317": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "SLOAD",
      "path": "80"
    },
    "318": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        188,
        210
      ],
      "op": "DUP2",
      "path": "80"
    },
    "319": {
      "fn": "ReentrancyMock.callback",
      "jump": "o",
      "offset": [
        188,
        210
      ],
      "op": "JUMP",
      "path": "80"
    },
    "320": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        512,
        868
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "321": {
      "offset": [
        1688,
        1689
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x2"
    },
    "323": {
      "offset": [
        2277,
        2284
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "325": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2277,
        2284
      ],
      "op": "SLOAD",
      "path": "143"
    },
    "326": {
      "offset": [
        2277,
        2296
      ],
      "op": "EQ",
      "path": "143"
    },
    "327": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2277,
        2296
      ],
      "op": "ISZERO",
      "path": "143"
    },
    "328": {
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH2",
      "path": "143",
      "value": "0x186"
    },
    "331": {
      "offset": [
        2269,
        2332
      ],
      "op": "JUMPI",
      "path": "143"
    },
    "332": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x40"
    },
    "334": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP1",
      "path": "143"
    },
    "335": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MLOAD",
      "path": "143"
    },
    "336": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "340": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "342": {
      "op": "SHL"
    },
    "343": {
      "offset": [
        2269,
        2332
      ],
      "op": "DUP2",
      "path": "143"
    },
    "344": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "345": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x20"
    },
    "347": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x4"
    },
    "349": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "350": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "351": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "352": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x1F"
    },
    "354": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x24"
    },
    "356": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "357": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "358": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "359": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "361": {
      "op": "DUP1"
    },
    "362": {
      "op": "MLOAD"
    },
    "363": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "365": {
      "op": "PUSH2",
      "value": "0x423"
    },
    "368": {
      "op": "DUP4"
    },
    "369": {
      "op": "CODECOPY"
    },
    "370": {
      "op": "DUP2"
    },
    "371": {
      "op": "MLOAD"
    },
    "372": {
      "op": "SWAP2"
    },
    "373": {
      "op": "MSTORE"
    },
    "374": {
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x44"
    },
    "376": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "377": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "378": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "379": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "380": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MLOAD",
      "path": "143"
    },
    "381": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "382": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP2",
      "path": "143"
    },
    "383": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "384": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "SUB",
      "path": "143"
    },
    "385": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x64"
    },
    "387": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "388": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "389": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "REVERT",
      "path": "143"
    },
    "390": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "JUMPDEST",
      "path": "143"
    },
    "391": {
      "offset": [
        1688,
        1689
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x2"
    },
    "393": {
      "offset": [
        2407,
        2414
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "395": {
      "offset": [
        2407,
        2425
      ],
      "op": "SSTORE",
      "path": "143"
    },
    "396": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        585,
        590
      ],
      "op": "DUP1",
      "path": "80"
    },
    "397": {
      "branch": 8,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        585,
        590
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "398": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        581,
        862
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x2C6"
    },
    "401": {
      "branch": 8,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        581,
        862
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "402": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        606,
        614
      ],
      "op": "PUSH2",
      "path": "80",
      "statement": 1,
      "value": "0x199"
    },
    "405": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        606,
        612
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x418"
    },
    "408": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        606,
        614
      ],
      "op": "JUMP",
      "path": "80"
    },
    "409": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        606,
        614
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "410": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "412": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP1",
      "path": "80"
    },
    "413": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "414": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "416": {
      "op": "NOT"
    },
    "417": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        783,
        788
      ],
      "op": "DUP4",
      "path": "80"
    },
    "418": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        783,
        788
      ],
      "op": "ADD",
      "path": "80"
    },
    "419": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x24"
    },
    "421": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP1",
      "path": "80"
    },
    "422": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP4",
      "path": "80"
    },
    "423": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "ADD",
      "path": "80"
    },
    "424": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "425": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "426": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "427": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "428": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP3",
      "path": "80"
    },
    "429": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "430": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP1",
      "path": "80"
    },
    "431": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP4",
      "path": "80"
    },
    "432": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "SUB",
      "path": "80"
    },
    "433": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "434": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "435": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "ADD",
      "path": "80"
    },
    "436": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP2",
      "path": "80"
    },
    "437": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "438": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x44"
    },
    "440": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "441": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "442": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "ADD",
      "path": "80"
    },
    "443": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP3",
      "path": "80"
    },
    "444": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "445": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x20"
    },
    "447": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP2",
      "path": "80"
    },
    "448": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "ADD",
      "path": "80"
    },
    "449": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP1",
      "path": "80"
    },
    "450": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "451": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "453": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "455": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "457": {
      "op": "SHL"
    },
    "458": {
      "op": "SUB"
    },
    "459": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "AND",
      "path": "80"
    },
    "460": {
      "op": "PUSH4",
      "value": "0x4629A27D"
    },
    "465": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "467": {
      "op": "SHL"
    },
    "468": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "OR",
      "path": "80"
    },
    "469": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP2",
      "path": "80"
    },
    "470": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "471": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "472": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "473": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP2",
      "path": "80"
    },
    "474": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "475": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        692,
        704
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "477": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        692,
        704
      ],
      "op": "SWAP4",
      "path": "80"
    },
    "478": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        717,
        721
      ],
      "op": "ADDRESS",
      "path": "80"
    },
    "479": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        717,
        721
      ],
      "op": "SWAP4",
      "path": "80"
    },
    "480": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "SWAP3",
      "path": "80"
    },
    "481": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "482": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP3",
      "path": "80"
    },
    "483": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "484": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "485": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP1",
      "path": "80"
    },
    "486": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP4",
      "path": "80"
    },
    "487": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        728,
        789
      ],
      "op": "DUP4",
      "path": "80"
    },
    "488": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "489": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x20"
    },
    "491": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP4",
      "path": "80"
    },
    "492": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "LT",
      "path": "80"
    },
    "493": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x207"
    },
    "496": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "497": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP1",
      "path": "80"
    },
    "498": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "499": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP3",
      "path": "80"
    },
    "500": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "501": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "503": {
      "op": "NOT"
    },
    "504": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "505": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP3",
      "path": "80"
    },
    "506": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "ADD",
      "path": "80"
    },
    "507": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "508": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x20"
    },
    "510": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "511": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP3",
      "path": "80"
    },
    "512": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "ADD",
      "path": "80"
    },
    "513": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "514": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "ADD",
      "path": "80"
    },
    "515": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x1E8"
    },
    "518": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "JUMP",
      "path": "80"
    },
    "519": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "520": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x1"
    },
    "522": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP4",
      "path": "80"
    },
    "523": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x20"
    },
    "525": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SUB",
      "path": "80"
    },
    "526": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x100"
    },
    "529": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "EXP",
      "path": "80"
    },
    "530": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SUB",
      "path": "80"
    },
    "531": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP1",
      "path": "80"
    },
    "532": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "NOT",
      "path": "80"
    },
    "533": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP3",
      "path": "80"
    },
    "534": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "535": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "AND",
      "path": "80"
    },
    "536": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP2",
      "path": "80"
    },
    "537": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP5",
      "path": "80"
    },
    "538": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "539": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "AND",
      "path": "80"
    },
    "540": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP1",
      "path": "80"
    },
    "541": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP3",
      "path": "80"
    },
    "542": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "OR",
      "path": "80"
    },
    "543": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP6",
      "path": "80"
    },
    "544": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "545": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "546": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "547": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "548": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "549": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "550": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "551": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "552": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "553": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "ADD",
      "path": "80"
    },
    "554": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "555": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "556": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "557": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "559": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "561": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "562": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP1",
      "path": "80"
    },
    "563": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP4",
      "path": "80"
    },
    "564": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SUB",
      "path": "80"
    },
    "565": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP2",
      "path": "80"
    },
    "566": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "568": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP7",
      "path": "80"
    },
    "569": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "GAS",
      "path": "80"
    },
    "570": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "CALL",
      "path": "80"
    },
    "571": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "572": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "573": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "574": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "RETURNDATASIZE",
      "path": "80"
    },
    "575": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP1",
      "path": "80"
    },
    "576": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "578": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP2",
      "path": "80"
    },
    "579": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "EQ",
      "path": "80"
    },
    "580": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x269"
    },
    "583": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "584": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "586": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "587": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "588": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "589": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x1F"
    },
    "591": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "NOT",
      "path": "80"
    },
    "592": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x3F"
    },
    "594": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "RETURNDATASIZE",
      "path": "80"
    },
    "595": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "ADD",
      "path": "80"
    },
    "596": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "AND",
      "path": "80"
    },
    "597": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP3",
      "path": "80"
    },
    "598": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "ADD",
      "path": "80"
    },
    "599": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "601": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "602": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "RETURNDATASIZE",
      "path": "80"
    },
    "603": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP3",
      "path": "80"
    },
    "604": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "605": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "RETURNDATASIZE",
      "path": "80"
    },
    "606": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "608": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x20"
    },
    "610": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "DUP5",
      "path": "80"
    },
    "611": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "ADD",
      "path": "80"
    },
    "612": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "RETURNDATACOPY",
      "path": "80"
    },
    "613": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x26E"
    },
    "616": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "JUMP",
      "path": "80"
    },
    "617": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "618": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x60"
    },
    "620": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "621": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "622": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "623": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        709,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "624": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        691,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "625": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        691,
        790
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "626": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        691,
        790
      ],
      "op": "POP",
      "path": "80"
    },
    "627": {
      "branch": 9,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        812,
        819
      ],
      "op": "DUP1",
      "path": "80",
      "statement": 2
    },
    "628": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x2C4"
    },
    "631": {
      "branch": 9,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "632": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "634": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "DUP1",
      "path": "80"
    },
    "635": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "636": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "640": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "642": {
      "op": "SHL"
    },
    "643": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "DUP2",
      "path": "80"
    },
    "644": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "645": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x20"
    },
    "647": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x4"
    },
    "649": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "DUP3",
      "path": "80"
    },
    "650": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "ADD",
      "path": "80"
    },
    "651": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "652": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x1B"
    },
    "654": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x24"
    },
    "656": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "DUP3",
      "path": "80"
    },
    "657": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "ADD",
      "path": "80"
    },
    "658": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "659": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "PUSH32",
      "path": "80",
      "value": "0x5265656E7472616E63794D6F636B3A206661696C65642063616C6C0000000000"
    },
    "692": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x44"
    },
    "694": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "DUP3",
      "path": "80"
    },
    "695": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "ADD",
      "path": "80"
    },
    "696": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "697": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "698": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "699": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "700": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "DUP2",
      "path": "80"
    },
    "701": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "702": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "SUB",
      "path": "80"
    },
    "703": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x64"
    },
    "705": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "ADD",
      "path": "80"
    },
    "706": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "707": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "REVERT",
      "path": "80"
    },
    "708": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        804,
        851
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "709": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        581,
        862
      ],
      "op": "POP",
      "path": "80"
    },
    "710": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        581,
        862
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "711": {
      "op": "POP"
    },
    "712": {
      "offset": [
        1645,
        1646
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x1"
    },
    "714": {
      "offset": [
        2580,
        2587
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "716": {
      "offset": [
        2580,
        2602
      ],
      "op": "SSTORE",
      "path": "143"
    },
    "717": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "o",
      "offset": [
        512,
        868
      ],
      "op": "JUMP",
      "path": "80"
    },
    "718": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        346,
        506
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "719": {
      "offset": [
        1688,
        1689
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x2"
    },
    "721": {
      "offset": [
        2277,
        2284
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "723": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2277,
        2284
      ],
      "op": "SLOAD",
      "path": "143"
    },
    "724": {
      "offset": [
        2277,
        2296
      ],
      "op": "EQ",
      "path": "143"
    },
    "725": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2277,
        2296
      ],
      "op": "ISZERO",
      "path": "143"
    },
    "726": {
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH2",
      "path": "143",
      "value": "0x314"
    },
    "729": {
      "offset": [
        2269,
        2332
      ],
      "op": "JUMPI",
      "path": "143"
    },
    "730": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x40"
    },
    "732": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP1",
      "path": "143"
    },
    "733": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MLOAD",
      "path": "143"
    },
    "734": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "738": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "740": {
      "op": "SHL"
    },
    "741": {
      "offset": [
        2269,
        2332
      ],
      "op": "DUP2",
      "path": "143"
    },
    "742": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "743": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x20"
    },
    "745": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x4"
    },
    "747": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "748": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "749": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "750": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x1F"
    },
    "752": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x24"
    },
    "754": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "755": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "756": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "757": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "759": {
      "op": "DUP1"
    },
    "760": {
      "op": "MLOAD"
    },
    "761": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "763": {
      "op": "PUSH2",
      "value": "0x423"
    },
    "766": {
      "op": "DUP4"
    },
    "767": {
      "op": "CODECOPY"
    },
    "768": {
      "op": "DUP2"
    },
    "769": {
      "op": "MLOAD"
    },
    "770": {
      "op": "SWAP2"
    },
    "771": {
      "op": "MSTORE"
    },
    "772": {
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x44"
    },
    "774": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "775": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "776": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "777": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "778": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "MLOAD",
      "path": "143"
    },
    "779": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "780": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP2",
      "path": "143"
    },
    "781": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "782": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "SUB",
      "path": "143"
    },
    "783": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x64"
    },
    "785": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "786": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "787": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "REVERT",
      "path": "143"
    },
    "788": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2269,
        2332
      ],
      "op": "JUMPDEST",
      "path": "143"
    },
    "789": {
      "offset": [
        1688,
        1689
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x2"
    },
    "791": {
      "offset": [
        2407,
        2414
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "793": {
      "offset": [
        2407,
        2425
      ],
      "op": "SSTORE",
      "path": "143"
    },
    "794": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        420,
        425
      ],
      "op": "DUP1",
      "path": "80"
    },
    "795": {
      "branch": 10,
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        420,
        425
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "796": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        416,
        500
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x2C6"
    },
    "799": {
      "branch": 10,
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        416,
        500
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "800": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        441,
        449
      ],
      "op": "PUSH2",
      "path": "80",
      "statement": 3,
      "value": "0x327"
    },
    "803": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        441,
        447
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x418"
    },
    "806": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        441,
        449
      ],
      "op": "JUMP",
      "path": "80"
    },
    "807": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        441,
        449
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "808": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        463,
        489
      ],
      "op": "PUSH2",
      "path": "80",
      "statement": 4,
      "value": "0x2C6"
    },
    "811": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        487,
        488
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x1"
    },
    "813": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        483,
        484
      ],
      "op": "DUP3",
      "path": "80"
    },
    "814": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        483,
        488
      ],
      "op": "SUB",
      "path": "80"
    },
    "815": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        463,
        482
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x2CE"
    },
    "818": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        463,
        489
      ],
      "op": "JUMP",
      "path": "80"
    },
    "819": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        874,
        1058
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "820": {
      "offset": [
        1688,
        1689
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x2"
    },
    "822": {
      "offset": [
        2277,
        2284
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "824": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2277,
        2284
      ],
      "op": "SLOAD",
      "path": "143"
    },
    "825": {
      "offset": [
        2277,
        2296
      ],
      "op": "EQ",
      "path": "143"
    },
    "826": {
      "branch": 11,
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2277,
        2296
      ],
      "op": "ISZERO",
      "path": "143"
    },
    "827": {
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH2",
      "path": "143",
      "value": "0x379"
    },
    "830": {
      "branch": 11,
      "offset": [
        2269,
        2332
      ],
      "op": "JUMPI",
      "path": "143"
    },
    "831": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x40"
    },
    "833": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP1",
      "path": "143"
    },
    "834": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "MLOAD",
      "path": "143"
    },
    "835": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "839": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "841": {
      "op": "SHL"
    },
    "842": {
      "offset": [
        2269,
        2332
      ],
      "op": "DUP2",
      "path": "143"
    },
    "843": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "844": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x20"
    },
    "846": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x4"
    },
    "848": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "849": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "850": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "851": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x1F"
    },
    "853": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x24"
    },
    "855": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "856": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "857": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "858": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "860": {
      "op": "DUP1"
    },
    "861": {
      "op": "MLOAD"
    },
    "862": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "864": {
      "op": "PUSH2",
      "value": "0x423"
    },
    "867": {
      "op": "DUP4"
    },
    "868": {
      "op": "CODECOPY"
    },
    "869": {
      "op": "DUP2"
    },
    "870": {
      "op": "MLOAD"
    },
    "871": {
      "op": "SWAP2"
    },
    "872": {
      "op": "MSTORE"
    },
    "873": {
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x44"
    },
    "875": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP3",
      "path": "143"
    },
    "876": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "877": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "MSTORE",
      "path": "143"
    },
    "878": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "879": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "MLOAD",
      "path": "143"
    },
    "880": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "881": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "DUP2",
      "path": "143"
    },
    "882": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "883": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "SUB",
      "path": "143"
    },
    "884": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x64"
    },
    "886": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "ADD",
      "path": "143"
    },
    "887": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "SWAP1",
      "path": "143"
    },
    "888": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "REVERT",
      "path": "143"
    },
    "889": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2269,
        2332
      ],
      "op": "JUMPDEST",
      "path": "143"
    },
    "890": {
      "offset": [
        1688,
        1689
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x2"
    },
    "892": {
      "offset": [
        2407,
        2414
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "894": {
      "offset": [
        2407,
        2425
      ],
      "op": "SSTORE",
      "path": "143"
    },
    "895": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        953,
        961
      ],
      "op": "PUSH2",
      "path": "80",
      "statement": 5,
      "value": "0x386"
    },
    "898": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        953,
        959
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x418"
    },
    "901": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "i",
      "offset": [
        953,
        961
      ],
      "op": "JUMP",
      "path": "80"
    },
    "902": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        953,
        961
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "903": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "PUSH1",
      "path": "80",
      "statement": 6,
      "value": "0x40"
    },
    "905": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP1",
      "path": "80"
    },
    "906": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "907": {
      "op": "PUSH4",
      "value": "0xA2DF1ED"
    },
    "912": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "914": {
      "op": "SHL"
    },
    "915": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP2",
      "path": "80"
    },
    "916": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "917": {
      "op": "PUSH4",
      "value": "0x41D9399"
    },
    "922": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "924": {
      "op": "SHL"
    },
    "925": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x4"
    },
    "927": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP3",
      "path": "80"
    },
    "928": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "ADD",
      "path": "80"
    },
    "929": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "930": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "931": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "932": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        992,
        1015
      ],
      "op": "PUSH32",
      "path": "80",
      "value": "0x83B2732F78169BFAAD6B407FA338CC97D697ED69D3915A18239CC111D51A402"
    },
    "965": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        992,
        1015
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "966": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "968": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "970": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "972": {
      "op": "SHL"
    },
    "973": {
      "op": "SUB"
    },
    "974": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1045
      ],
      "op": "DUP5",
      "path": "80"
    },
    "975": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1045
      ],
      "op": "AND",
      "path": "80"
    },
    "976": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1045
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "977": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1045
      ],
      "op": "PUSH4",
      "path": "80",
      "value": "0xA2DF1ED"
    },
    "982": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1045
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "983": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x24"
    },
    "985": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP1",
      "path": "80"
    },
    "986": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP3",
      "path": "80"
    },
    "987": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "ADD",
      "path": "80"
    },
    "988": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "SWAP3",
      "path": "80"
    },
    "989": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        971,
        982
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "991": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        971,
        982
      ],
      "op": "SWAP3",
      "path": "80"
    },
    "992": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "993": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "994": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "995": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP3",
      "path": "80"
    },
    "996": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "997": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "SUB",
      "path": "80"
    },
    "998": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "ADD",
      "path": "80"
    },
    "999": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP2",
      "path": "80"
    },
    "1000": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        971,
        982
      ],
      "op": "DUP4",
      "path": "80"
    },
    "1001": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1045
      ],
      "op": "DUP8",
      "path": "80"
    },
    "1002": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP1",
      "path": "80"
    },
    "1003": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "EXTCODESIZE",
      "path": "80"
    },
    "1004": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "1005": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP1",
      "path": "80"
    },
    "1006": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "1007": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x3F7"
    },
    "1010": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "1011": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "1013": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP1",
      "path": "80"
    },
    "1014": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "REVERT",
      "path": "80"
    },
    "1015": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "1016": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "POP",
      "path": "80"
    },
    "1017": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "GAS",
      "path": "80"
    },
    "1018": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "CALL",
      "path": "80"
    },
    "1019": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "1020": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP1",
      "path": "80"
    },
    "1021": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "1022": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x40B"
    },
    "1025": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "1026": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "RETURNDATASIZE",
      "path": "80"
    },
    "1027": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "1029": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "DUP1",
      "path": "80"
    },
    "1030": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "RETURNDATACOPY",
      "path": "80"
    },
    "1031": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "RETURNDATASIZE",
      "path": "80"
    },
    "1032": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "1034": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "REVERT",
      "path": "80"
    },
    "1035": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1026,
        1051
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "1036": {
      "op": "POP"
    },
    "1037": {
      "op": "POP"
    },
    "1038": {
      "offset": [
        1645,
        1646
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x1"
    },
    "1040": {
      "offset": [
        2580,
        2587
      ],
      "op": "PUSH1",
      "path": "143",
      "value": "0x0"
    },
    "1042": {
      "offset": [
        2580,
        2602
      ],
      "op": "SSTORE",
      "path": "143"
    },
    "1043": {
      "op": "POP"
    },
    "1044": {
      "op": "POP"
    },
    "1045": {
      "op": "POP"
    },
    "1046": {
      "op": "POP"
    },
    "1047": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "o",
      "offset": [
        874,
        1058
      ],
      "op": "JUMP",
      "path": "80"
    },
    "1048": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1064,
        1119
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "1049": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1111,
        1112
      ],
      "op": "PUSH1",
      "path": "80",
      "statement": 7,
      "value": "0x1"
    },
    "1051": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1100,
        1112
      ],
      "op": "DUP1",
      "path": "80"
    },
    "1052": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1100,
        1112
      ],
      "op": "SLOAD",
      "path": "80"
    },
    "1053": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1100,
        1112
      ],
      "op": "DUP2",
      "path": "80"
    },
    "1054": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1100,
        1112
      ],
      "op": "ADD",
      "path": "80"
    },
    "1055": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1100,
        1112
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "1056": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1100,
        1112
      ],
      "op": "SSTORE",
      "path": "80"
    },
    "1057": {
      "fn": "ReentrancyMock._count",
      "jump": "o",
      "offset": [
        1064,
        1119
      ],
      "op": "JUMP",
      "path": "80"
    }
  },
  "sha1": "12fabf3efa2d29c7ab50f1f50b39aadbc3924854",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ReentrancyGuard.sol\";\nimport \"./ReentrancyAttack.sol\";\n\ncontract ReentrancyMock is ReentrancyGuard {\n    uint256 public counter;\n\n    constructor () public {\n        counter = 0;\n    }\n\n    function callback() external nonReentrant {\n        _count();\n    }\n\n    function countLocalRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            countLocalRecursive(n - 1);\n        }\n    }\n\n    function countThisRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success,) = address(this).call(abi.encodeWithSignature(\"countThisRecursive(uint256)\", n - 1));\n            require(success, \"ReentrancyMock: failed call\");\n        }\n    }\n\n    function countAndCall(ReentrancyAttack attacker) public nonReentrant {\n        _count();\n        bytes4 func = bytes4(keccak256(\"callback()\"));\n        attacker.callSender(func);\n    }\n\n    function _count() private {\n        counter += 1;\n    }\n}\n",
  "sourceMap": "139:982:80:-:0;;;217:50;;;;;;;;;-1:-1:-1;1645:1:143;1760:7;:22;;;249:11:80;;139:982;;;;;;",
  "sourcePath": "contracts/openzeppelin-contracts@3.4.0/contracts/mocks/ReentrancyMock.sol",
  "type": "contract"
}